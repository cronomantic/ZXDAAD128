<?php
// (C) Uto, Jose Manuel Ferrer & Cronomantic 2019 - This code is released under the GPL v3 license
// This is a fork of the backend of DAAD reborn compiler by Uto & Jose Manuel Ferrer for generate
// the data blocks for the banks for a ZX Spectrum or upper model.


//================================================================= Main globals ========================================================

global $adventure;
global $isBigEndian;
global $xMessageOffsets;
global $maxFileSizeForXMessages;

$isBigEndian = false;

define('VERSION_HI',0);
define('VERSION_LO',7);

define('FAKE_DEBUG_CONDACT_CODE',220);
define('FAKE_USERPTR_CONDACT_CODE',256);
define('XMES_OPCODE', 128);
define('XPICTURE_OPCODE',130);
define('XSAVE_OPCODE',131);
define('XLOAD_OPCODE',132);
define('XPART_OPCODE',133);
define('XPLAY_OPCODE',134);
define('XBEEP_OPCODE',135);
define('XSPLITSCR_OPCODE',136);
define('XUNDONE_OPCODE',137);
define('XNEXTCLS_OPCODE',138);
define('XNEXTRST_OPCODE',139);
define('XSPEED_OPCODE',140);
define('XDATA_OPCODE',142);
define('LET_OPCODE',51);

define('SFX_OPCODE',    18);
define('PAUSE_OPCODE',  35);
define('EXTERN_OPCODE', 61);
define('BEEP_OPCODE',   64);
define('AT_OPCODE', 0);
define('PROCESS_OPCODE',75);

define('XPLAY_OCTAVE', 0);
define('XPLAY_VOLUME', 1);
define('XPLAY_LENGTH', 2);
define('XPLAY_TEMPO',  3);

define('MESSAGE_OPCODE',38);
define('MES_OPCODE',77);

//================================================================= interpreters ========================================================
$interpreters = array(
    'TAPE' => array(
        'ES' => array(
            '42' => "",
            '32' => "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"
        ),
        'EN' => array(
            '42' => "eJztfAt4U1W28Al9JAUKrXCVgjNtGh8l1QGDVszAARzHen2A4wuUKDhqc4ZqC7QQWtq0WKG8HwIFC4rKQ0EgpUDTApehyRRJeo932rG9E+49d4yYjE6MY8VgoU1y19r7nDzatMzj+7/v/75rFM7ea6+999prr71eZx8uCy6/y+FyKBnmvswx83v4nAPWhleZH38//n78/fj78ffj78ffj79/+he8LoD8ti/Yzv0/p+XH3//nP9m+BbsXRFSPL/gosmpZcCqy2rbAFln9bMEfI6t/XfDnyGpgwZXIanJ+Qn5ENTd/dET176GYy585aE9ZSX5hFIJsW37lAD2GmPJ3DdRkz28YqMmV3zZQE/Pq1wM1jXtVPoC7P+SOVzOjmmTHX50UA1cmg/+v90OsEBpDi0wkkOmPTzsxDBPZBpXLMn+6Vj/X3X0l3lui0c9lU/jvV6qZ+ZlPckbNWE6lMmrGccp7GZfyZs4FcJVKxZ9bqVx7MpOZrx3LdcbN1o7jOufV2+Nf44euUis5VaaSUwID+bGrMl/jlNu5VEaWllnIqf+Vy1zEaW/mCm9jPOpFXFpmES0WQXEJLS6BooEWDVAs4ZQvM2SgfM6kyeP4/BPKoYzL5FMW5vOtK5WjSbkyorwrotwQUW6LKH8dUZa/imU6ZiaW2aBmOad+kkudyaQZVXmFLlgAf8tJk4/37TVpyjntciTPpfzpq3yuOYfhHz1pVReoyzm2cp+mjGMr9mmMnHLTSRf/UJPWSFEnIKq2nGuA7nztfkCIGsToA8TOoL7LnCUrM1uuvSa17siH1hdUz3hS45k0VxS0rUi1uB9aZgXs2EYONmwTp93ImS1vFfBH91mHFKorcBthMYAh9arHXt65FVzESHwkbCPQ1CnbM1vbwOmhsg3K9T7tJglqBugmChUptz9UEM0cmfX71/iL+9WnCJovqrHLYE0pEBtjtGhPcz5odZ6J1U1s1HfFbOU/PaRZy7G96jXcGaDzNNC5VqL+70AegGKC3+kfvHXgpsCgHQOxeaRZz/EXV6a+zPBVjSqXdj05H06z94kBeKpZT4FbOJSuAVkfjfY34YD06rsG3sz+2LE3cICBB8HVNnLqdYOIEaI0XQdlMxcl5+TEVJGj/ig96pkrQVUxwNeyk/ari9QrQd1VcS7tZqqPCrk0V5hkBPPfnYABrMxiQFNBqc8xqsJjROf28Ue3Qokd7uMf38p/sRu0yb5adT4c180c+1Mff+tWrKg3DUj+lkP496TDOMhIMggtp2BZGQ868pO1Jo1Cp3mFk2Y8/6FU2nlQ5MA6bkoE06GYqBif4ndp13HRYI+TH9bo4kfWhJn7KYf8W8+Z7d8s5lv2QkNqMKjWcZRbgFa0BpFJC6jQzZxyM3d3BOuMMDmR/tkwGzk/9fYZRREIcPYM6nEcQM5cTC4yaWpwIaBlNKtx8zVrODz12jXwZzWcfl0NnpegZXcRG4gJ9feBarHBfrQInj7+FRNSqfCxY318Uz3sB+UmLztO+ts7KNpddSLazbHReima80hMtEja+5EDRM4pjkX6nOL+66S0Lygms715VJztpmiiLu4HToIQggTzBxvN9u3FSkYGdSXUL6y17ileihKpXqaDHbv4TnHoTMDI54qB65oGYpsIAIgHgJkLbb/mdLjs48u2ssk+/ruNIihElVQh7JUqhIlShbCKVsKCAXJVw6GMIcb4nTA1ERQ4zNSszF8CcjcVBEIb7sX2Gv6BkQ7FGAnlLjQUcmBdZCsZM1wVjwptchoiajAXVnHaf4Cw6UuV67l7cPYNUbRt4AydAcuLS4HsKUg27ERNeCfChzYnGAvIhM1HrSgdaDwiDzporjQUkiCD0gGi0c4vhQpiVoEIRg4XaY0ooVEqHNaoXs+daR9hMEHReoNhG1UYYRRk0WBD4GpRtiNkK1othTUSar0QhshjaffU5MBQRbqOeiu+CMNOnZW2mM4ADkz2j80QaTD5CHAZOeKy6ApxQ+Yc1tpxZ92VeGrgOR2e7MQwgcAFpGs9x8pwwQc5FLD14DZbHlmGDeB9wFAgF8AeH//ZVkCy3liCmtaSt4zAPlkNMLP9xhLUsaRpqsVAm4iOx9GGWNZQCNH1CJFbdi5Df1Wsvmw5Lk6HE/HJJ+k8aP0e7m/9UgrQ+vUzl9mDG0NVdI82av60SHxWCeyFuwLWbp2IxSuVyAYAyexsCWCgY72O0xwk5JIIAYMGl/o1jvjf51aGdluVuSIUQ6wAKqAZ0USUI8fx77QT/HNNYuGTRtrVLdf8huN3ZYZN2rnruxTN10exXBclWojhaFHZ72Ny+5/E2aURJ3FD7JMYeQDX9x8YD+U6OJR7S8mh/KCUHMoNMQ+l2fJfpfz2vbFW0lXKfxSrQZQv8ZBEHIWfLA8dhUniUWDvCZ8JjKUGVSZ91lszIHvRGIVNmWLaRRCfTzlipb5cRw7ELHxoPuUGnQ80V6wo5G8ncMDO7jjNXGnuZ8hQT3P8i8dNmmc5zXOc5kXY8GCmjgv5bZoWRAJhhX06z7m7wSc8oTkfaX0/WR0rJBIhca+KRxUO8Y4yNt7Hd23ud4zJEYrs4J27IkYYGAULBZmhM/6ldMbB3fuY439AD9W6tQr+D4nmP6aZBz5La7mQifTxih0Dy3IIk2hWvqUuJnjFMQR/sVtsPEUabWFes0GcZWArGIrJyq9vKUXZBAN+Fol2y6urq7EF9vhjkD5xj7UgFb/mtCAYL5HqrzmQE+1LKCrikM+RIZ/l1M9w26btma2ejdhQqoezJgpVhItqOWCERYAP6gNvNOxNSl5KrciRcCRAfQ90/zNjGQAXeJMulwl0fWxVf4GLcnvWEbdnM6p26u9sEv2diRUQHtxDQ5JIf2cd8XdmVojBgxgExJDtogoqcKiBMMcR4ZXXVKBeCO97DAeezhsZW6yLEVuMrIzloAM0hjM/snIgt/3WSjJ4SN5wP/r0ng0Vchrq7c9XsnejnjT5iDP57nZRf75UCcugsWN4DWB9GjhNNRcY0c7j/MCl8R71nRw15ytIdGltqVSvwqhqm6WpEgymyhhDVhGuEjugbxq07Kjsk+cSp5xDxG/2wCpM6lYWCrHDumZHhF4hU4p09klJDaiLrFS5b6YtDQsk0wlCKVMzLbJDh1r4vzZ6yqr3zJvNf9lU7tOKqDsXRJxKs+XICn7oKj7/BL/oEL8EpUgLgTOGtvwKPKBtHEbSUPonLIJxsMTH32BQzsbMe0VCtOVE2cFjEOP48H4skTXi1KLaaKeqIqYDHaFN1/bRphGuX2SEBGHQ5si4J5ZTEnHE18MRD1rgHAxB2/T38KQvA6Mw++vfRbhqNgFnwaS3q6UDL+f4SHrbJ6jfqlLvqspsrCo7+TuG6QJYl98pONuandbJsRP41/8d+T//kzHMZfWY+VcdTmSmo8eW62x7uO2Sbrn5Qv2Flo5l7jH6ZcT0VVevKPQ+0tiQtPzhp56fmpUJgNxb6I/f3NDS4UpkvHWwG1Dx4J+Urz1tiYqHO1pcOUxylvyp50cRhOZbUrxtzRzoPfyVrygs03sfOdWQ9IuEC2SMhz3KDCYNEFPh0dac8hfbA49Z/9SAf+8226zPHbA5nI62ZofLYc1oCpW9dba2ruYOw7Blxy7ATFBVL9N557njpuSWpZenH9aXp5elHyk8rE/51ua+KVerm+tzf1kn81dc1ujmekt6umwmrHhLEtO9JaCcLtkElwBP4T6hIF7IS+APrRSWxAvFCVKuZsYqNgnllDYLV4F1zkuOcC9jQueL0/b42FKhJmHaHindvnwVaTg/QzAkQClmtxnY7bmobvWk24zzLw7QDU289aZqSotRMASFgkQhTw6lgHA22P71KlZmVVYLxqBwNtB+bRUbxBpBVtFVUXyoJArFcuGeJMGYpDeducivMtG5mpthNjANKjQAmtJq+OtSNcSG9mrHyJEjC93pevaz/YUQa27QubtzAeSW1ymZOYZU2Zxmb53Dk+bypDLTO/gvqtu00LEya1riuYeU6UxaR2LK2FGOREV6a2pKT4nDkJ3yrRMwcTSIp24pc8szRprKOhX68vMZhRPjy84r9GmeGSlWQJrTwa9ZTYez86sTx5DxcDgY5JoyhUE8j5VfzTgSMxyyYLAljq3k01fzP1tdPXkEFC650vj7VzsvVU/8qnlEgM9YPfzCjJmq1jGtaS0yGfPp7avjxvz38OqMOKPqpj9Wt6a2poz5TtHSwS9cbbxB1TaqGSTNMmG1wgYwFz8HgE4J+guAlsvlcrd8Vhmy4rNctnvfMT2bvr+ucDmFl0rw94/NZtP31s2zSQSeXe2tq56cDE+gD04BkOdB8n7bh7zzQJ7Qh7woeXC5hJwAI+T4GXUuJyy5JhT3aB/hBEMvCBDR7DoOBBlcAbN9+BqQjwVrtL/irqCmBfmxzlkjFFwT8nqMIIeWR9aojJr5HIWILsALHB0HvAiYQ2Z9cQ2+8aLzCHcHBCNIXu/FsWtA6HBIoz+m0E6iGWlyorauQX8JYp/5ITLUL3D8HdXiENDfRqy8Qme2H18TcWaG5Qqr5IG0yfEJy8b4QHRnCasSAsrJ8cklUF2UJCwcJhjlRE7jzs/Rl7s/KwTaVxaitIKSEWYOEx5MMtyR0utMzkpIc1kT1woPJggz5SXuMVem60vc8nT4VRYKDw4TZiaZWlw3Kp6fgej5t/yLJWets5nNWFnYPmstq3hDn/KZdF7wwIAydLXeXth6+8rC1mn437xyt1xR2joB/wNKSt1IVVUh0DGvSFWUXeruPj9d7wKdBpwY6nCNYFKDcYoPskbkKj5Ib027t3Vs67gUn0KRa3y/zqAy7j1mcN7iiOuamtFuu5y5TNcTxVptC1eYqmH4u8zCkoBQHCSsO09MLj36EDJ0mMEvv38dgPX4FvS8lHmevG6pUBAQ8oLeuST53D6Z4lRizAOy8uA6sglj1ll/uY43rTHF0mNhL84I8bME+IACngkBqEsI7qkEaKGAOSHApxTwbAhwiQKeCwG+o4C5IYAsnwA26AYnTPs0Z4giTPtMGEAI084OAwhh2jlhACEMwj9DFGEQ2xmiCNPODQMIYbDdhpinAbHAJnrUv+TS6KZBX7dM/RJ3wn56Pd2RVCZebKP1mAO5JqFNKognpiBPDtp9FZoCY7Dah39V67veoAKJ7cZAtWDw+/AZ2QDofrfcftsGcpqDdEADnusacUxxEc19J3dNwlzsivXCkh6huFcN0fAz3BswILAK5tM+Lh1vv3XHBqGgR8jrhZVD2AZSsirIP79WuBuIClK3t3IDkCGd/tAsV4P3Xc1hZIkMMfXSbFeF4msYXMNsU5H+nCCDYxp6YRcFQ4/gcqb2BNNc+OyFJ29fD7sJ6+6BP70+6MaPWhlJ3T0bhYKrQt61gan76cZY1CEPtHmc2eLdiPs3BJ9zuKl270ZWpsnjlK9AoAx1vfYVHOOrjVJCoH3HRpPyOYixj2xQ53N0k9VPQqFXKPYrL0iXKlJfZtIyn+Rw1Y/jO0i+bqVQ0Cvk+QFIZQKQlEPE94uvYDqCz92AVzH6kTkJ3YphluRN+BLw6CasDbekb8IjjaEhhYywTNgEhL8s1Uda2E2mcDXZMnsTGf9ZDoi/m39ko3X3pjAbgVkJuD0uUQ586jkc8PIN5CTR68pnubuBmyAcwIHdmyLGCfHl6CaRLbGFXdRnomdm+XKzkNNLDJ/omxGbhEfB6twMc3Zm4CtNyrKykySE37ZZtG2U18RvMgbM9kcBP9CZIT6TxedQfJLuEfjWtM0gZrC4bdiZtLrEQcl7f4qJolQo3gSY1r6NkmPZCBQHk63bNtP3KJRssTdo6YONeq2eO+GTaPcBr8K5N7KA3+NItK+4DmnNADdbvt3Uj3Psd6AelTdscfHmTaJ2wlc1I7ck57742isZv1y8uHCxlgl1c14yZyXlGlWBysnXUro9zktjZ7krDKNUJYGKyd+bDH02hIgvrtdkoIthgzVAi+hsgr/m3wKC7VIrOWBI0F3BZ20hgi4SHbBe3kJZCOwyiEwGE262f76FbAjZQNwJXDwpJRM2fL7FZIC5cU0hEvpyhOys5a0t1qVvkiFVbyJf51nI06e9AHHxL7aHeiOWSElQokSaP0jnty8lIwy1zH4zO7RqHFnqGoMmgv/ilrACTZUxoGSy4lWjxvzgGUjRgWsTOlUFQ4W8YS66c+M9TpI/Epb4heIAv/pNqgv5fSupCpbUmKhrC/xCXoA/t1JyzeQ+sYV/aAstoUqJ8GMkcrTpnHA24WLuVnU259LO4nwmHzndNW/2Ey8RtSiEysoGxv0p4rZv3crK0f9Tj4ceMwfv8RPSo2Urvt+DHrdDj8cG7aHsppyUS5yUJya2TkvpdccRiZC7pwEf6ebQtKroJWNaVdqzQGec5YFt6mmSN/0AmjPrqm3YMsTywjb1VKnlF+GWqRbDNvXPpYb7xQb1fRJkBkd2E2VUCi1rt5msSdspzEVFCDY4JDmiCIhKhux2t1B8lew28b4LuoW8q66o/mS3A2S3k3xiC9ltLMFus7KIOM9lDDBZyYGfZckDQ7PiVGO+NRmcNmMgIwPK3TZsHBbIgMZk0tjXg1GPA5V9sWa7+lbYlEcjZARN1fjt1KzxGqkQgozeTo0XUUgxHQvtzWTXT203kU3vOz45c99tj5zGZfTx1aucBjoyTGHt2R4yrYNNJ1qUofhutX1SDVTLz08k75efrBETAvnktk0Ika9qFFFiGimg3WwproHI218DeyC6J9Zva9CEBlG1F4oXKDHiCml3aJDTly4SRgmX1gYo8shLfF4csjNo6YAnnSAYSvUJNQGLV4KD65IXBFKmnmlfAbRE7Hm0/ibUKneYrBk7CZlXdxAyqdpLAAeQ6L0rO6ImMvil6iJS7ZWWliCtwE9vE2HBH6a/jY7U656Ofph7mrSq/9mBAaz1DztEmykuJ2j5/Q5JtkFl8ood5JxGhJ55AbrEfWTUaTTiobY0hBVmRJY4mkcZJLudthM2CdZNgOWxo1ZYk+YCvinYvxP1hLTioBRak9xsK4e2bZrm3zktz7kr0GC4p1fXa3hO+4lUr6zXfMJJvYqw13+Eqkuw+nvO2rjTBGPBMNATsAEDoP3p+ooquBtFBQfbpr4LJL1LKP5OfQ8UvELxN+p7oeARir9WT4LCV0LxX4BUajVgCaK/XsSJrvQSKPwgFHeDVApLfELxFRA+Ycllofh76WX+XRin/FUo/tZ6V61Q0CXkfWfsDFiefQv5S6yMS4Q60XbiNLSuonSFDJJXyPuG4lBzhXUVJVko+EHI6wYcj5D3NcVBmmhdRVcTsm9hHFxAHxyfkHcFcL4S8v5CcXBJtK6izBAKLgt530fh4Gr74OACAOevQt63xI+7+PBbsJWampjuNaikrbV/hzdsra0lKJIaiRFcac9yZvuFWu2n9IX5WfLCnGg1wjxjgtku26X9LdgVv9nyfS1/cWW5O+78EKiq9dw2++cwgR9DB3hoOLzioufQ22eVCMSLLU/AiL+qpZtjMmDegJa9c/NppubBXUoZCS/MlqW7rQ/uWkqyAb/cBQ8M8O7TBYJZyYJr3o0MRC38yTjBiQ5PsuQ1ZZCLvXRMDxCOvnAo1Vm7i2icV3Yj5nBL165ovIuv7AYSMfaRKMym6wYnaw53pt2xC+KJe6xf7AJnfCoNJe4Jr0kcNmMaJYQ6jQALLQ+mgPBKnIigWO4MT4imJkhmxhb7Q7v7cstF2h8nFgfrkkCTgTLFpWSbDNrzsDsBt8L+xm6IvECNuVPsZ3eH9jB8gZ5uihTkYe9M6krSSIGIwn/uJjIAovApEQXcTBNsakhFKCeRq/KjyRX6saQ8M59em1/AhaXrB6pAFGJQHdQ04H1CTSOnaeI05zhNM6excLg5NK8ILnXOVcaasIckNlJIxgWUvtmevAfWOyUK6u9MIGB/5wrxWUnimAb6DjVk666GKmb7wbdBewMNMIvM6n8HO/XrYra3ilgiRiLBMQ8y7LW3IwYccl307HdwfDMX1aE5moYnCU4zUNpzJ8WbStCaotGWErQmaah4gnMuGqeW4JyTcOKo3ezpVIXp0zZGd+FJl8Z+Xe6M6GKJ7uInXSxon1AvYIwYmHTxF28DcwXDD8APwdCNesQyE/bqB8l6d0vfO2A5kBUaDZG6oR/uVSxs7YLwlxL25XugKiF3E/egu1MTPv7v4GAaK3nH/zuKAuOBP0ub/22P1opSqf0dCibZCLvmXXw/b+FwX/D9vGC4BtCMdwXjNc3RiJsNdTDctZB/AqZYYwpBiK09E6oSS/xvnBWG7oUxoKsJkAEBgGSN9ukw/A9wfAjrgL5ekTEg6ZKLsyLSRVv8bhSz22vfZSdhIs0QIAdldL6LOk/imeFPrKRej1jPYaA6JboOZMwmDKq/XrQD1dSnT8kSGL7ezCYIZ+Xt/neFHHmCMoFxgWYjjrvLmdodTMOpWzEkJFNFwcUsC0YSqKDz3hMJDmNAkO/rB+wygDPAxuNrqJ+/p57ARWRMHO+xCT4xVdJnLv7sKrOl5T3amJrAgHeVlyQUKAwUMgrrwyAGNrAyq1NCkzNp0fkbi/E9k8IhBjnPHYBiRFA7QgYRzojAHVlDAz/PSgxos4aMYErCHLxMOThc5ODofNFfyLkMuu97huhqEmR/sZu6HyTBtGwv6vpMy873qS8hhXQr3qf+B3UoQP3S0az6vRQvenAEgzdw7T2z/ZTUEdMP7ArJbaEYnRl2HABnp14RYSuzlyat5OSZSZ84mAVKxJtShbEJmzreD3lZOBbxasrRn++TMfWJjhb/ybtm+xN7Jcp6gSpjT9ijwqFED8wYELlCOop+WSgt9av3rZv3PjqLeXQG8+isJ+HxJEk42bSj882W/XsxuN9Xy6e8D/HekLdtaLrwoKDxOkeNF2JAC6Zxwd5jChfztD7+9Brxpgu95gI7mvkCp5mPF1/AOEY5VMrl3N3a5Vzn0Gnto/exceQFVAaJM1X72ETyhlfMsahVnJhlIdEjeGnSDY78fCroNKCMuk6Dt6zExD1ycMAPwuLolR1VDtPnEg/elgqdb5O6FHyc6fujJg53KcvvO8iOfpD6fhC+H+TLfpAByQP23YPsC4ZzM/1uHyIDq/fox2OaamAOiAPGjp6X4xX40JU2ugMxri5TThv7O+J87X70TMvAXUo4IGlaeg+FCiPp4rykULlUMma40ZwVP1yV0u1cBM6awmx554Mp1sMHNBMP/Adj02h1IIrzUxnFOPiZDCqD6oHH4uIWqRaqgAKoGVibJueArezkhezsBx4DVJVKvAG39IDZe3/SxZcPeFzZgD//NyrswlcfcD6T/UL2g9kzXUlw8pznXB581e5JeuAxLDjFoW2KruY2n0JwafQ6QVmrE3KYOCFHFhQWDRMWDheKkoXFI1xlJx94LCttpupB1bJjWSpXi3K3LvVtHTh1ORneumanR4kpjfs9E+NkQ5nUXTpvnRMUI/mnb47oZN8Ek65mfqRzgb/uSk1lTPfy6z8QnBO/G1EpGJlAXMaQEVcC8RMvKaHf3I90iUONUzLiSipnjRp7VpUhG57yQ2tJxnltrQ4wfyu8MEx4Zrhyvw5PzImseO8TGaOFgmQhbwSMrtXrWidMhcEnJ7BjgZ/qIzpk/2jFv3jn+S7zv05QdH2++4MehQ0XnLlXB0t5RYClZY0XlG/SdUeuWZbEKLfqUrfpcI1OunZ2RNbd0YvdCotV79XBcikdMBX/kw+7Pk/4sEepHJP5ug4oYJMEp48idVk1B1yUDfz5eMHJP/DhZAhkbD2JmqUpfro8Ngjw8/G52od07skjR478Q4Ct+K9A+jJb5OvGqfYFHwo5CbKB7m242Ckk8CIOPViTUH5KmUeiAGrSVCr8nBb1YegVj5iXHuTFGIkkZ38oGCAk3HSQvA8L3dMXIw36za8Um0fkh8U7/PzSDyVVnjDVojvITiVXGk1rQvG92IcYBlbGJx/Q0jv783FCmZhsrsNks9lecpC9T+pvDMa4BNefQwOviDt03RVFUz/xEBqC+3SDr8EUWkLqWEZ9n47Y77txLpmVPshSHjlEl2LSnObwtt68Q+Iw+HFDOMUeWr60ML55p40/us9sWXKIfJ/cR/1Fqy0UiuiPD0FbsenSx4eYDDt/KPJiZD/NR28LUoESM2h9UbQfc1NQORIdG7qwm43eQb9rvNnZbMXZ9oc+kpxTSYWiH9EZtFR8pD2Nka214iPxNSkmg9sB3M+O4JXYnx3uk6mMyoOqz9F75xGZT6O6OeraueXZjzD18jGnucCF+kF4ENkF4gSgpd9K+huPKOsXhRKyVdQ7iXG3edZhvNs8+zAro5eb++ZswIOS+YNJHuWcUzIZ463T2smNC2C7ezrJBfcw+NLS+tQRUYrEDBu+/AtlSgpp6jeBZC1yj2CMAYHIEfICB3OJERHe14fRNcIcD7h3UKHvFREJxJGiZPSdCpOfY4+wPyOXlzOOsBPEAXwkX/TudjLW5CN0LLZSaAiSNxc9xFOMSneQylPP04Fx2C240Ro7FzunBYfTLb9NZs4ty4qrBt1KsmT0GoKe/fm2SEE7EKSva8z23x1BkYPQkMhebD3SL3k2SVvDkTw15mwLo3O2NIUbIBpm/E6U3VPcNkv2UfYuwpCqo6ix/JYpR9mfRAAC9seO4lV1ERBwV1peOMpmiQD2VsrDUFaY9RuAm2b7mqOYJcC78muO0vvhA7zaFinWniL3GE6Tewx/E/VSqj0o1PQQgfEdZTWErGdMFEreJ/sliRltwq9TxWZcxq0mdnwI4Bdqeqe1TzaxahHE3tZ3ZQFcGX7xaNWZBlkSWU+g7xr6Ei1+bXzQxKaRCTPrxA2xnzHhF8AEJH7rQbordui73tBrbeAe/4+JzQ51CqibUAPF17HjENZfD+E4t8RaS4CsJatusO2Rduf0oGuybKhjb+8zBb7YJpJwpk6SBCyhhL1Tx44h9DfUkY0KWOrqRCFsqKOy9k/T5LfEHxNnWXRMnOXGY+IsEoQISEASkHuOiXKOzRHrkNN1PHFMXAd7B3FnyNeY7Dyf9ih5oS5+E2E4Fkn6QOfzOrRLMhIgMsIfE2XkYL24kO+PsXeGacCkrTziswwJzUcecml54+vpVxyDdOr0R3LEF1v8Qir4lXpRDLGvn4rhuvoBxfBgfWwxpEfKVD8Y3yZFfzAE7MIPVMzSByrf1hMagZQf6smyYJaB+G8mV7Qakf8ssihAU944KFgby7PHWX8sKH5JEw0Wb3za8GrP09wb4jcfHa5UNaM8dIiPazJbdhyHlv4fgyzXzObEa1x6dsyZ9sPH1U9z2zRzuIGcQhLcBVqndaIbAw4PVPixpwCJP9SEqYurwTR+fVNLh48tTVX9p2zoVP6+JrHVGOQTT0FLGI3vNve/zTUJP0YdiR/eahnyES1euHCno/lW2P/1hJATQKfQnWJ/+gRehsV8yw2NeDXM1IhwORlRqSCp990LMA1Pyx9FlP8YUf6zVAZ9qzwVqozxKW0RWFdCDXKfMoFk90m6w6SRXgQQNxY9VM2LHHqRGj0HQW5m/Elnc9slP4Q3+E0FD8t0+p2/mQ9N5DWVr0xw8cw5wanHbyzKbJlvVUGnXVWXlcwbqbI3ZDJZmTfX4K3TF7JWgyr17SrwjLwv9PwzEbvGSN+eVY4uvKvwkUKucFXh8cJLhbKFNy/ULnx64cqFhxf+fmFg4fhFTy9atmjXopsWKxc/t3j+4rzFixevWbx18duLOxYPKVIUPVF0rujPRSOKy4pNxZ8Wf1Z8uZhZkrxk7JLblyxacmbJ0KULllYs3bb00tLbDA8aZhn0hkWGcwa74Q+GPxm+NtywLLdkXsnrJatLtpTUlnxY0lryTUlq6Wulp0u7S29bPnH5wuWly99d3rZ8RNnNZTPKXihbXjakPKFcUf58eXX5O+Uny0+X28u/Kk823m/8lXG+ca2xziirmF1RXvFhxauVf6qMX/HSir0rmlZcWpH5+vzXi1/f8PqO199+vf71rVUd8GdI1daqnKqXqjZUdXjnNjZIN99vulcRuvo+DK++B9Imx01rs6W12ZjpzBwJt+xWwE25V4EXkMs7yTV56OVL62qzYcAzzqwcOz8uruzkBcwquDwQErcnmJ0Ax+yCx/qXBpfDKYvHUNnRnml2dngwZsdDCfvjtHmyF2cXpbVhEsLmcV5KTCl7DJrGtypvap9uTku5YpupyvsNjpxZa/ZcylxldpAQHP893eYkB4TuI7CxY5ijjV9ttj5vNjpw6Ny0FL9HXWvGqdKsDGM6YbnLfPJCQNl+l/mXr0KjjWFa+D81NAPZOYz4VYcLwntbh+BqS0PRUbn43eY2D2ZGWvh6czOYQpfjEqKUva8v31to4xvUDtByXW3N+O/7WhvUZTftmff0o6ZcKEIbaYAnCHs3RvZl9fry44U25QZdQJE10pw1hJ2ea3T/ts6gam2wqVqv2JSbdGO+QI6W6zBjsFqnbmzIfEOXg1pIFrzJW6c+1ZC5Sgc1vOErCw7x1tlayy6UTygsm6BX2QjfElNa77rJu8D7xMQhackplz3639j4/EaPrfSworU0S758wrzSCbNHtZb97qVGgCvM31qhsBoQTN4nzk2JJK4SiKtA4s4CcQFKXCo2ZySOGntFfoPNLc8d6+6uu2EU/H2DLXWTztrW6Gh2mB94zOm930P/drQ4bI42B2hdR4dDUXbyeD0ru6D4fFxT6TeVLPPtFBvNSE0e4X0ibWLSsCRPkifO22iDhfH/bf5r/GRrV7bzEv9wE6iOs79Xtd3IVM9rvYFkSb8K0zIZaYEfkPMxIedjSs7zTYhoxOyYCkQG9Iczzfp6U4cHC20KbFQYSFINhM8mgq3vNkG89acG6ORytI1yZHe08M8daCay0gbCgujDQF7sriZYUpvLAwKRnW1r1baOa7259Se21lJxQyir7zh3y7lRtkL5Hv282aXm79JP8d838emnWntsoKd0T5UeP3Hy/kcudLjwK6OfVcoY5vFnHaXH647ZHz/VOrk1DW/kO2DksVAcc4d10ilHeetpEF1Z8H8B4PI+fg==",
            '32' => "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"
        )
    ),
    'PLUS3' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => ""
        )
    )
);

function uncompressBytes($data)
{
    return gzuncompress(base64_decode($data));
}

//================================================================= filewrite ========================================================
function Error($msg)
{
 echo("Error: $msg.\n");
 exit(2);
}
//================================================================= filewrite ========================================================

$buffer = array(
    0 => array(),
    1 => array(),
    3 => array(),
    4 => array(),
    6 => array(),
    7 => array()
);

$bufferPTR = array(
    0 => 0,
    1 => 0,
    3 => 0,
    4 => 0,
    6 => 0,
    7 => 0
);

$currBuffer = 0;

// Writes a byte value to buffer
function writeByte($byte)
{
    global $buffer, $bufferPTR, $currBuffer;

    if ($byte > 0xff)
        Error("ERROR on write byte $byte.");
    else
    {
        $buffer[$currBuffer][$bufferPTR[$currBuffer]] = $byte;
        $bufferPTR[$currBuffer]++;
    }
}

// Moves pointer to end of buffer
function seekend()
{
    global $buffer, $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = sizeof($buffer[$currBuffer]);
}

// Moves pointer to specified offset in the buffer
function seek($offset)
{
    global $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = $offset;
}


// Gets the size of the buffer
function sizeBuffer()
{
    global $buffer, $currBuffer;
    return sizeof($buffer[$currBuffer]);
}


// Saves the buffer to a file
function flushBuffer($handle)
{
    global $buffer, $currBuffer;
    foreach ($buffer[$currBuffer] as $byte)
        fwrite($handle, chr($byte), 1);
}


// Writes a word value to buffer, will store as little endian or big endian depending on parameter
function writeWord($word, $bigEndian=false)
{
    $word = intval($word);
    $a = ($word & 0xff00) >> 8;
    $b = ($word & 0xff);
    if ($bigEndian)
    {
        $tmp = $b;
        $b = $a;
        $a = $tmp;
    }
    writeByte($b);
    writeByte($a);
}

// shortcut for writeByte(0)
function writeZero()
{
    $b =0;
    writeByte($b);
}

// shortcut for writeByte(0xFF)
function writeFF()
{
    $b =0xFF;
    writeByte($b);
}

// Writes $size bytes to file with value 0
function writeBlock($size)
{
    for ($i=0;$i<$size;$i++) writeZero();
}

//writes an array of bytes on the buffer
function appendBuffer($buff)
{
    foreach ($buff as $b) writeByte($b);
}

function string2intArr($string)
{
    $l = strlen($string);
    $r = array();
    for($i = 0; $i < $l; $i++)
    {
      $r[] = ord($string[$i]);
    }
    return $r;
}

function writeBytes($bytes)
{
    foreach($bytes as $byte) writeByte($byte);
    return sizeof($bytes);
}

function writeFile($fileName)
{
    $bytes = file_get_contents($fileName);
    if (!$bytes) return false;
    return writeBytes(string2intArr($bytes));
}

//================================================================= externs ========================================================

function generateExterns(&$adventure, &$currentAddress)
{
    global $currBuffer;


    foreach($adventure->externs as $extern)
    {
        $externData = $extern->FilePath;
        $parts = explode('|',$externData);
        if (sizeof($parts)<2) $parts[] ='EXTERN'; // this is just to be able to process old version .JSON files
        $filePath = $parts[0];
        $fileType = $parts[1];
        if (!file_exists($filePath)) Error("File not found: ${filePath}");
        $bytes = writeFile($filePath);
        if (!$bytes) Error("File not found: ${filePath}");
        switch ($fileType)
        {
            case 'EXTERN': $adventure->extvec[0] = $currentAddress; break;
            case 'SFX': $adventure->extvec[1] = $currentAddress; break;
            case 'INT':$adventure->extvec[2] = $currentAddress; break;
            default: Error("Invalid file type '$fileType' for file $filePath");
        }
        echo "$fileType $filePath loaded at " . prettyFormat($currentAddress) . "\n";
        $currentAddress+=filesize($filePath);
    }
}

//================================================================= tokens ========================================================


// Tokens array is data is a JSON object with hexedecimal representation of several strings:
$compressionJSON_ES  = '{"compression": "advanced", "tokens": ["00","2071756520","6120646520","6f20646520","20756e6120","2064656c20","7320646520","206465206c","20636f6e20","656e746520","20706f7220","2065737415","7469656e65","7320756e20","616e746520","2070617261","206c617320","656e747261","6e20656c20","6520646520","61206c6120","6572696f72","6369186e20","616e646f20","69656e7465","20656c20","206c6120","20646520","20636f6e","20656e20","6c6f7320","61646f20","20736520","65737461","20756e20","6c617320","656e7461","20646573","20616c20","61646120","617320","657320","6f7320","207920","61646f","746520","616461","6c6120","656e74","726573","717565","616e20","6f2070","726563","69646f","732c20","616e74","696e61","696461","6c6172","65726f","6d706c","6120","6f20","6572","6573","6f72","6172","616c","656e","6173","6f73","6520","616e","656c","6f6e","696e","6369","756e","2e20","636f","7265","6469","2c20","7572","7472","6465","7375","6162","6f6c","616d","7374","6375","7320","6163","696c","6772","6164","7465","7920","696d","746f","7565","7069","6775","6368","6361","6c61","6e20","726f","7269","6c6f","6d69","6c20","7469","6f62","6d65","7369","7065","206e","7475","6174","6669","646f","656d","6179","222e","6c6c"] }';
$compressionJSON_PT  = '{"compression": "advanced", "tokens": ["00", "737461766120", "207061726120", "0e110f6f20", "20756d6120", "646f20", "646120", "20646520", "696120", "206e6f20", "206120", "206f20", "2071756520", "206d7569746f20", "617320", "206c75676172", "696e686120", "616f20", "616e746520", "657374", "617220", "726120756d20", "206520", "6e6120", "2e20416f20", "20636f", "707265636973", "706172", "6f7320", "6f2e20", "656e686f20", "2e2e2e0d", "20202020202020", "73736f20", "736520", "656d20", "657373", "66617a657220", "706f72746120", "6f2e0d", "6d656e74", "72746f20", "726120", "6964616465", "676172", "6361727265", "696f20", "656e64657220", "646520", "726573", "2e2e2e20", "6c6f63616c20", "61766120", "6e7465", "6f2c20", "726f20", "612e0d", "6e747261", "756d6120", "636f6e", "657220", "616c6775", "756d20", "2e204f20", "696e68", "2073656d707265", "20706f72", "6d616973", "6d6520", "736f627265", "657261", "617265", "73756120", "696361", "2074656d706f20", "20616c", "646573", "656920", "732e20", "6f726d61", "6f6d6f20", "45737461", "5f2e0d", "747261", "6f732e", "0b2d203a207175", "66657272", "6465706f6973", "6f2065", "70616c", "616e64", "71756520", "756172", "6e68656369", "636f6d", "6f727265", "70617373", "74696e", "652c20", "2e2041", "697373", "0b2d20", "6120", "6f20", "6f75", "656c", "6572", "6520", "616c", "6f630e160f20", "6974", "6f72", "616e", "6172", "656e", "696e", "6f73", "6369", "616d20", "2e0d", "2e20", "6973", "2c20", "6573", "6f6e", "6361", "6972", "6176", "7175"]}';
$compressionJSON_EN  = '{"compression": "advanced", "tokens": ["00","2074686520","20796f7520","2061726520","696e6720","20746f20","20616e64","20697320","596f7520","616e6420","54686520","6e277420","206f6620","20796f75","696e67","656420","206120","206f70","697468","6f7574","656e74","20746f","20696e","616c6c","207468","206974","746572","617665","206265","766572","686572","616e64","656172","596f75","206f6e","656e20","6f7365","6e6f","6963","6170","2062","6768","2020","6164","6973","2063","6972","6179","7572","756e","6f6f","2064","6c6f","726f","6163","7365","7269","6c69","7469","6f6d","626c","636b","4920","6564","6565","2066","6861","7065","6520","7420","696e","7320","7468","2c20","6572","6420","6f6e","746f","616e","6172","656e","6f75","6f72","7374","2e20","6f77","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","646f","6f70","7368","6d65","6865","626f","6869","6361","706c","696c","636c","2061","6f66","2068","7474","6d6f","6b65","7665","736f","652e","642e","742e","7669","6c79","6964","7363","2070","656d","7220"] }';
$compressionJSON_DE  = '{"compression": "advanced", "tokens": ["00","2065696e6520","2064657220","2064696520","2064617320","2069737420","20766f6e20","2065696e20","20756e64","756e6420","44657220","44696520","44617320","20756e67","6c65696e","65727420","20647520","207a7520","2065696e","20766572","737420","6d6974","766f6e","68656e","617573","656e74","207a75","616c6c","206465","656e20","616265","697374","206265","766572","206475","447520","686572","756e64","696e67","736368","4475","6368","6965","6e6f","6963","6162","2062","6569","2020","6c6c","2063","6972","6572","7572","756e","2064","6c6f","726f","6172","7365","7269","6c69","7469","6f6d","7373","636b","4920","6564","6568","2066","6861","7065","6520","7420","696e","7320","6465","2c20","6572","6420","7a75","616e","6172","656e","6175","6f64","7374","2e20","686f","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","6d61","6f70","6d65","6865","626f","6869","6b61","7565","6f65","6165","2061","2068","7474","6d6f","6b65","766f","736f","652e","642e","742e","7669","6d6d","7363","2070","656d"]}';
$compressionJSON_FR  = '{"compression": "advanced", "tokens": ["7f", "4a65206e6520", "706f72746520", "20646520", "4a6520", "782070617320", "666169726520", "746520", "2064616e7320", "205f2e0d", "4a27616920", "6e6520", "20706f757220", "6d61696e7465", "657220", "656e6c6576", "706575", "65722e0d", "61207269656e", "63656c612e", "0d51756520", "20706c65696e", "707579657a20", "20706173", "64166a0e100f", "652e0d", "6e616e74203f", "6c6520", "746f75636865", "73757220", "721665737361", "2e0d", "656e737569", "6c657a20", "6f7520", "65722e", "6d0e140f", "6e2761692072", "0d457420", "2074726f7020", "6c6965752e20", "496c206e2779", "6f6e74696e75", "657374", "7265", "6973717565", "6d6f69203a0d", "726f75", "6173736574", "6f737369", "69656e", "7320", "6669636869", "6572", "205f2e", "7572", "6f6d", "63656c61", "766f69", "73756973", "706f7274", "6e616e74", "0e160f74", "6169", "4c6520", "4020", "656374", "657a20", "452044", "7365", "617520", "0e140f", "6f6e", "202d20", "6575", "6f75", "6d70", "6574", "6170", "7061", "6e27", "616c", "6f69", "7573", "2e20", "7072", "2e2e", "6f72", "2064", "2063", "6369", "3a20", "6d65", "2056", "642e", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f"]}';

// A .TOK alternative file can be placed together with input JSON file (just use same name, .TOK extension. It's content should a JSON object just like the ones above)


function generateTokens(&$adventure, &$currentAddress, $hasTokens, $compressionData, &$savings)
{
    if (!$hasTokens)
    {
        writeZero();
        $currentAddress++;
    }
    else
    {
        $compressableTables = getCompressableTables($compressionData->compression,$adventure);

        // *** FIRST PASS: determine which tokens it's worth to use:

        // Copy all strings to an array
        $stringList = array();
        foreach ($compressableTables as $compressableTable)
            for ($i=0;$i<sizeof($compressableTable);$i++)
                $stringList[] =  $compressableTable[$i]->Text;

        // Determine savings per token
        $tokenSavings = array();
        for ($j=0;$j<sizeof($compressionData->tokens);$j++)
        {
            $token = $compressionData->tokens[$j];
            for ($i=0;$i<sizeof($stringList);$i++)
            {
                $parts = explode($token, $stringList[$i]);
                if (sizeof($parts)>1)
                 for ($k=0;$k<sizeof($parts)-1;$k++)  // Once per each token replacement (number of parts minus 1)
                 {
                    if (array_key_exists($j, $tokenSavings)) $tokenSavings[$j] += strlen($token) - 1; else $tokenSavings["$j"] = -1; // First replacement of a token wastes 1 byte, next replacements save token length minus 1
                 }
                 $stringList[$i] = implode(chr($j+127), $parts);
            }
        }

        // Remove tokens which aren't worth to use
        $totalSaving = 0;
        $finalTokens = array($compressionData->tokens[0]); //never remove first token
        for ($j=1;$j<sizeof($compressionData->tokens);$j++) // $j=1 to start by second token
        {
            if (!array_key_exists($j, $tokenSavings)) $tokenSavings[$j] = 0;
            if ($tokenSavings[$j]>0)
            {
                $finalTokens[] = $compressionData->tokens[$j];
                $totalSaving += $tokenSavings[$j];
            }
            else if ($adventure->verbose)
            {
                if ($tokenSavings[$j]==0) echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause it was not used by any text.\n";
                                     else echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause using it wont save any bytes, but waste ".abs($tokenSavings[$j])." byte.\n";
            }
        }
        $savings = $totalSaving;

        // *** SECOND PASS: replace and dump only remaingin tokens

        if ($adventure->verbose) echo "Compression tokens used: " . sizeof($finalTokens) . ".\n";
        if ($adventure->classicMode)
        {
            while (sizeof($finalTokens)<128) $finalTokens[] = ' ';
            if ($adventure->verbose) echo "Filling tokens table up to 128 tokens for classic mode compatibility.\n";
        }


        // Replace tokens
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $token = $finalTokens[$j];
            foreach ($compressableTables as $compressableTable)
                for ($i=0;$i<sizeof($compressableTable);$i++)
                {
                    $message = $compressableTable[$i]->Text;
                    $parts = explode($token, $message);
                    $newMessage = implode(chr($j+127), $parts);
                    $compressableTable[$i]->Text = $newMessage;;
                }
        }

        // Dump tokens to file
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $tokenStr = $finalTokens[$j];
            $tokenLength = strlen($tokenStr);
            for ($i=0;$i<$tokenLength;$i++)
            {
                $shift = ($i == $tokenLength-1) ? 128 : 0;
                $c = substr($tokenStr, $i, 1);
                writeByte(ord($c) + $shift);
                $currentAddress++;
            }
        }


    }
}
//================================================================= common ========================================================

define ('OFUSCATE_VALUE', 0xFF);

class daadToChr
{
var $conversions = array('ª', '¡', '¿', '«', '»', 'á', 'é', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ç', 'Ç', 'ü', 'Ü');
var $newConversions = array(16=>'à',17=>'ã',18=>'ä',19=>'â',20=>'è',21=>'ë',22=>'ê',23=>'ì',24=>'ï',25=>'î',26=>'ò',27=>'õ',28=>'ö',29=>'ô',30=>'ù',31=>'û',35=>'ß');

}

function summary($adventure)
{
    echo "\n";
    echo "Adventure Totals\n";
    echo "================\n";
    echo "Locations   : " . sizeof($adventure->locations) . "\n";
    echo "Objects     : " . sizeof($adventure->objects) . "\n";
    echo "Messages    : " . sizeof($adventure->messages) . "\n";
    echo "Sysmess     : " . sizeof($adventure->sysmess) . "\n";
    if (sizeof($adventure->xmessages)) echo "XMessages   : " . sizeof($adventure->xmessages) . "\n";
    echo "Connections : " . sizeof($adventure->connections) . "\n";
    echo "Processes   : " . sizeof($adventure->processes) . "\n";
    echo "\n";

}

function prettyFormat($value)
{
    $value = strtoupper(dechex($value));
    $value = str_pad($value,4,"0",STR_PAD_LEFT);
    $value = "0x$value";
    return $value;
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    return ($info['dirname'] ? $info['dirname'] . DIRECTORY_SEPARATOR : '')
        . $info['filename']
        . '.'
        . $new_extension;
}

function addPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        writeZero(); // Fill with one byte for padding
        $currentAddress++;
    }
}

function checkPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        $currentAddress++;
    }
}



function hex2str($hex)
{
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));

    return $string;
}


function getCompressableTables($compression, &$adventure)
{
    $compressableTables = array();
    switch ($compression)
    {
     case 'basic': $compressableTables = array($adventure->locations); break;
     case 'advanced':  $compressableTables = array($adventure->locations, $adventure->messages, $adventure->sysmess, $adventure->xmessages); break;
    }
    return $compressableTables;
}




//================================================================= messages  ========================================================


function replaceChars($str)
{
    // replace special Spanish and other languages characters
    $daad_to_chr = new daadToChr();
    // Old standard Spanish characters
    for($i=0;$i<sizeof($daad_to_chr->conversions);$i++)
    {
        $spanishChar = $daad_to_chr->conversions[$i];
        if (strpos($str, $spanishChar)!==false)
        {
            $to = chr($i+16);
            $str = str_replace($spanishChar, $to, $str);
        }
    }

    // New supported characters
    foreach($daad_to_chr->newConversions as $i=>$nonEnglishChar)
    {
        if (strpos($str, $nonEnglishChar)!==false)
        {
            $to = '#g'. chr($i) . '#t';
            $str = str_replace($nonEnglishChar, $to, $str);
        }
    }
    // replace escape sequences
    $replacements = array('#g'=>0x0e, '#t'=>0x0f,'#b'=>0x0b, '#s'=>0x20, '#f'=>0x7f, '#k'=>0x0c, '#n'=>0x0D, '#r'=>0x0D);
    // Add #A to #P to replacements array
    for ($i=ord('A');$i<=ord('P');$i++) $replacements["#" . chr($i)]= $i + 0x10 - ord('A');

    $oldSequenceWarning = false;
    foreach ($replacements as $search=>$replace)
    {
        // Check the string does not contain old escape sequences using baskslash, print warning otherwise
        if ($search!='#n')
        {
            $oldSequence = str_replace('#','\\', $search);
            if ((strpos($str, $oldSequence)!==false) && (!$oldSequenceWarning))
            {
                echo "Warning: DRC does not support escape sequences with backslash character, use sharp (#) instead. i.e: #g instead of \g";
                $oldSequenceWarning = true;
            }
        }
        $str = str_replace($search, chr($replace), $str);
    }

    // Replace carriage retuns that may come by users writing \n and that going throuhg as chr(10) instead of '\n' string
    $str = str_replace(chr(10), chr(13),$str);
    // this line must be last, to properly print # character
    $str = str_replace('##', "#",$str);
    return $str;
}

function replaceEscapeChars(&$adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects, $adventure->xmessages);
    foreach ($tables as $table)
     foreach($table as $message)
     {
        $message->originalText = $message->Text;
        // Although the following line is no longer needed, as DRF already generates the strings with all escape chars and special chars replaced
        // I'm keeping this code here so old JSON created with old DRF work.
        $message->Text = replaceChars($message->Text);
     }
}

function checkStrings($adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects);
    $tableNames = array('user messages (MXT)','system messages(STX)','location texts(LTX)','object texts(OTX)');
    $messageNames = array('message','message','location','object');
    for ($tableID=0;$tableID<4;$tableID++)
    {
        $table = $tables[$tableID];
        for ($msgID=0;$msgID<sizeof($table);$msgID++)
        {
            $message = $table[$msgID];
            $text = $message->Text;
            for ($i=0;$i<strlen($text);$i++)
            {
                if (ord($text[$i])>127)
                {
                    $tableName = $tableNames[$tableID];
                    $messageName = $messageNames[$tableID];
                    $originalMessage = $message->originalText;
                    Error("Invalid character in $tableName, $messageName #$msgID (".($i+1).",#".ord($text[$i])."): '$originalMessage'");
                }
            }
        }
    }

}


function generateXMessages($adventure)
{
    $currentOffset = 0;
    $currentFile = 0;
    $maxFileSize = 16;

    $i = 64 / $maxFileSize;
    $xmBuffer = array_fill(0, $i, array());
    $xmBufferPTR = array_fill(0, $i, 0);

    $GLOBALS['maxFileSizeForXMessages'] = $maxFileSize;
    $maxFileSize *= 1024; // Convert K to byte

    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $message = $adventure->xmessages[$i];
        $messageLength = strlen($message->Text);
        if ($messageLength + $currentOffset + 1  > $maxFileSize) // Won't fit, next File  , +1  for the end of message mark
        {
            $currentFile++;
            $currentOffset = 0;
        }
        $GLOBALS['xMessageOffsets'][$i] = $currentOffset + $currentFile * $maxFileSize;
        // Saving length as a truncated value to make it fit in one byte, the printing routine will have to recover the missing bit by filling with 1. That will provide
        // a length which could be maximum 1 bytes longer than real, what is not really important cause the end of message mark will avoid that extra char being printed
        for ($j=0;$j<$messageLength;$j++)
        {
            $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord($message->Text[$j]) ^ OFUSCATE_VALUE);
            $xmBufferPTR[$currentFile]++;
            $currentOffset++;
        }
        $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $xmBufferPTR[$currentFile]++;
        $currentOffset++;
    }

    return $xmBuffer;
}

function generateMessages($messageList, &$currentAddress)
{

    $messageOffsets = array();
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        addPaddingIfRequired($currentAddress);
        $messageOffsets[$messageID] = $currentAddress;
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
            writeByte(ord($message->Text[$i]) ^ OFUSCATE_VALUE);
            $currentAddress++;
        }
        writeByte(ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $currentAddress++;

    }
    // Write the messages table
    addPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        writeWord($messageOffsets[$messageID] , $GLOBALS['isBigEndian']);
        $currentAddress += 2;
    }

}

function calculateSizeMessages($messageList)
{

    $currentAddress = 0;
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        checkPaddingIfRequired($currentAddress);
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
             $currentAddress++;
        }
        $currentAddress++;
    }
    // Write the messages table
    checkPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        $currentAddress += 2;
    }

    return $currentAddress;
}


function generateMTX($adventure, &$currentAddress)
{
    generateMessages($adventure->messages, $currentAddress);
}

function generateSTX($adventure, &$currentAddress)
{
    generateMessages($adventure->sysmess, $currentAddress);
}

function generateLTX($adventure, &$currentAddress)
{
    generateMessages($adventure->locations, $currentAddress);
}

function generateOTX($adventure, &$currentAddress)
{
    generateMessages($adventure->objects, $currentAddress);
}


function getSizeMTX($adventure)
{
    return calculateSizeMessages($adventure->messages);
}

function getSizeSTX($adventure)
{
    return calculateSizeMessages($adventure->sysmess);
}

function getSizeLTX($adventure)
{
    return calculateSizeMessages($adventure->locations);
}

function getSizeOTX($adventure)
{
    return calculateSizeMessages($adventure->objects);
}

//================================================================= connections ========================================================


function generateConnections($adventure, &$currentAddress)
{

    $connectionsTable = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++) $connectionsTable[$locID] = array();
    foreach($adventure->connections as $connection)
    {
        $FromLoc = $connection->FromLoc;
        $ToLoc = $connection->ToLoc;
        $Direction = $connection->Direction;
        $connectionsTable[$FromLoc][]=array($Direction,$ToLoc);
    }


    // Write the connections
    $connectionsOffset = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        addPaddingIfRequired($currentAddress);
        $connectionsOffset[$locID] = $currentAddress;
        $connections = $connectionsTable[$locID];
        foreach ($connections as $connection)
        {
            writeByte($connection[0]);
            writeByte($connection[1]);
            $currentAddress +=2;
        }
        writeFF(); //mark of end of connections
        $currentAddress++;
    }

    // Write the Lookup table
    addPaddingIfRequired($currentAddress);
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        writeWord($connectionsOffset[$locID], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }

}

//================================================================= vocabulary ========================================================




function generateVocabulary($adventure, &$currentAddress)
{

    $daad_to_chr = new daadToChr();
    foreach ($adventure->vocabulary as $word)
    {
        // Clean the string from unexpected, unwanted, UFT-8 characters which are valid for vocabulary. Convert them to ISO-8859-1
        $tempWord = $word->VocWord;
        $finalVocWord = '' ;
        $daad_to_chr = new daadToChr();
        for ($i = 0;$i<strlen($tempWord);$i++)
        {
            if (in_array($tempWord[$i], $daad_to_chr->conversions))
            {
                $tempWord[$i] = chr(16+array_search($tempWord[$i],$daad_to_chr->conversions));
            }
            else if (ord($tempWord[$i])<128) $finalVocWord.=$tempWord[$i];
            else if (ord($tempWord[$i])==195)  // Look for UTF encoded characters
            {
                $i++;
                switch (ord($tempWord[$i]))
                {
                    case 161 : $finalVocWord.= chr(21); break; //á
                    case 169 : $finalVocWord.= chr(22); break; //é
                    case 173 : $finalVocWord.= chr(23); break; //í
                    case 179 : $finalVocWord.= chr(24); break; //ó
                    case 186 : $finalVocWord.= chr(25); break; //ú
                    case 129 : $finalVocWord.= chr(21); break; //Ý
                    case 137 : $finalVocWord.= chr(22); break; //Ë
                    case 141 : $finalVocWord.= chr(23); break; //Ý
                    case 147 : $finalVocWord.= chr(24); break; //Ó
                    case 154 : $finalVocWord.= chr(25); break; //ú

                    case 145 : $finalVocWord.= chr(27); break; //Ñ
                    case 177 : $finalVocWord.= chr(27); break; //ñ

                    case 156 : $finalVocWord.= chr(31); break; //Ü
                    case 188 : $finalVocWord.= chr(31); break; //ü

                    case 135 : $finalVocWord.= chr(29); break; //Ç
                    case 167 : $finalVocWord.= chr(29); break; //ç

                    default: echo "Warning: Found invalid 195-" . ord($tempWord[$i]) . " UTF encoded string in $tempWord.\n";
                }
            } else
            if (ord($tempWord[$i])>128) $finalVocWord.=$tempWord[$i];
        }
        // Now let's save it
        $vocWord = substr(str_pad($finalVocWord,5),0,5);
        for ($i=0;$i<5;$i++)
        {
            $character =$vocWord[$i];
            if ((ord($character)>=32) && (ord($character)<128)) $character = strtoupper($character);
            $character = ord($character) ^ OFUSCATE_VALUE;
            writeByte( $character);
        }
        writeByte($word->Value);
        writeByte($word->VocType);
        $currentAddress+=7;
    }
    writeZero(); // store 0 to mark end of vocabulary
    $currentAddress++;
}
//================================================================= objects ========================================================
function generateObjectNames($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        writeByte($object->Noun);
        writeByte($object->Adjective);
        $currentAddress+=2;
    }
}

function generateObjectInitially($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeByte($object->InitialyAt);
     $currentAddress++;
    }
    writeFF();
    $currentAddress++;
}

function generateObjectWeightAndAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        $b = $object->Weight & 0x3F;
        if ($object->Container)
        {
            $b = $b | 0x40;
            $locno = $object->Value;
            $text = $adventure->objects[$locno]->Text;
            if ($adventure->locations[$locno]->Text != '') echo "Warning: object #$locno ($text) is a container. You are supposed to reserve location #$locno to hold the objects in the container, but location #$locno has a description.\n";
        }
        if ($object->Wearable) $b = $b | 0x80;
        writeByte($b);
        $currentAddress++;
    }
}

function generateObjectExtraAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeWord($object->Flags, $GLOBALS['isBigEndian']);
     $currentAddress+=2;
    }

}
//================================================================= processes ========================================================


function getCondactsHash($adventure, $condacts, $from)
{
    $hash = '';
    for ($i=$from; $i<sizeof($condacts);$i++)
    {
        $condact = $condacts[$i];
        $opcode = $condact->Opcode;
        if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue;
        if (($opcode==FAKE_USERPTR_CONDACT_CODE)) continue;
        if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
        $hash .= "$condact->Opcode ";
        if ($condact->NumParams>0)
        {
            $param1 = $condact->Param1;
            $hash .= "$param1 ";
            if ($condact->NumParams>1)
            {
                $param2 = $condact->Param2;
                $hash .= "$param2 ";
                if ($condact->NumParams>2)
                {
                    $param3 = $condact->Param3;
                    $hash .= "$param3 ";
                    if ($condact->NumParams>3)
                    {
                        $param4 = $condact->Param4;
                        $hash .= "$param4 ";
                    }
                }
            }
        }
    }
    return $hash;
}

function generateProcesses($adventure, &$currentAddress, $subtarget)
{
    global $bufferPTR;
    //PASS ZERO, CHECK THE PROCESSES AND REPLACE SOME CONDACTS LIKE XMESSAGE WITH PROPER EXTERN CALLS. MAKE SURE MALUVA IS INCLUDED
    //           ALSO FIX SOME BUGS LIKE ZX BEEP CONDACT WRONG ORDER
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if ($condact->Opcode == PROCESS_OPCODE)
                {
                    // Check if process called does exist, in case it's not indirect call
                    if (!$condact->Indirection1)
                     if ($condact->Param1 >= sizeof($adventure->processes)) Error('Invalid call to process #'.$condact->Param1.". Specified process does not exist");
                }
                else if (($condact->Opcode & 256) == 256) // Jump Maluva Condacts
                {
                    // rearrange the parameters so it's  1-<fixed opcode> 2-<8> 3-<pre-offset> 4-<0> 5-<p1> 6-[p2]
                    // For the time being, we are not filling the offset with real offset in DDB, we keep the "number of condact in the entry" value
                    // of param3 (pre-offset) and we keep a gap for later keep the offset in an LSB/MSB pair in p3/p4
                     if ($condact->NumParams == 2)
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param2; // The pre-offset in p3
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The condact parameter

                        $condact->NumParams = 5;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                    }
                    else
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param3; // The pre-offset in pe
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The first condact parameter
                        $p6 = $condact->Param2; // The second condact parameter
                        $condact->NumParams = 6;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                        $condact->Param6 = $p6;
                    }
                    $condact->Param2 = 8; // Maluva function for jumps
                    $condact->Opcode = EXTERN_OPCODE;
                }
                else if  ($condact->Opcode == XMES_OPCODE)  // Convert XMESS in a Maluva CALL, XMESSAGE does not actually get to drb, as drf already converts all XMESSAGE into XMESS with a \n added to the string
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $messno = $condact->Param1;
                    $offset = $GLOBALS['xMessageOffsets'][$messno];
                    if ($offset>0xFFFF) Error('Size of xMessages exceeds the 64K limit');
                    $condact->NumParams = 3;
                    $condact->Param2 = 3; // Maluva's function 3
                    $condact->Param1 = $offset & 0xFF; // Offset LSB
                    $condact->Param3 = ($offset & 0xFF00) >> 8; // Offset MSB
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPICTURE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams = 2;
                    $condact->Param2 = 0; // Maluva function 0
                    $condact->Condact = 'EXTERN';
                    // This is not necessary for 128, keep commented for reference
                    /*
                    if ($subtarget=='TAPE')  // If target does not support XPICTURE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                    */
                }
                else if ($condact->Opcode == XUNDONE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 7; // Maluva function 7
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XNEXTCLS_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 8; // Maluva function 8
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget!='NEXT')  // If target does not support XNEXTCLS_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XNEXTRST_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 9; // Maluva function 9
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget !='NEXT')  // If target does not support XNEXTRST_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSPEED_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 10; // Maluva function 10
                    $condact->Condact = 'EXTERN';
                    if (($subtarget!='NEXT') && ($subtarget!='UNO'))  // If target does not support XSPEED_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSAVE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 1; // Maluva function 1
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XLOAD_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 2; // Maluva function 2
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPART_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 4; // Maluva function 4
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XBEEP_OPCODE)
                {
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    {
                        $condact->Opcode = EXTERN_OPCODE;
                        $condact->NumParams=3;
                        $condact->Param3 = $condact->Param2;
                        $condact->Param2 = 5; // Maluva function 5
                        $condact->Condact = 'EXTERN'; // XBEEP A B  ==> EXTERN A 5 B  (3 parameters)
                    }
                }
                else if ($condact->Opcode == BEEP_OPCODE)
                {

                    // Out of range values, replace BEEP with PAUSE
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    // Zx Spectrum interpreter expects BEEP parameters in opposite order
                    {
                        $tmp = $condact->Param1;
                        $condact->Param1 = $condact->Param2;
                        $condact->Param2 = $tmp;
                    }
                }
                else if ($condact->Opcode == XPLAY_OPCODE)
                {
                    // Default values
                    $values = array(XPLAY_OCTAVE => 4, XPLAY_VOLUME => 8, XPLAY_LENGTH =>4, XPLAY_TEMPO => 120);
                    $xplay = array();
                    $mml = strtoupper($adventure->other_strings[$condact->Param1]->Text);

                    while ($mml) {
                        $next = strpbrk(substr($mml, 1), "ABCDEFGABLNORTVSM<>&");
                        if ($next!==false)
                            $note = substr($mml, 0, strlen($mml)-strlen($next));
                        else
                            $note = $mml;
                        $beep = mmlToBeep($note, $values, $subtarget);
                        if ($beep!==NULL) $xplay[] = $beep;
                        $mml = $next;
                    }
                    if (sizeof($xplay))
                    {
                        array_splice($entry->condacts, $condactID, 1, $xplay);
                        $condactID --; // As the current condact has been replaced with a sequentia of BEEPs, we move the pointer one step back to make sure the changes made for BEEP in ZX Spectrum applies
                    }
                }
                else if ($condact->Opcode == XDATA_OPCODE)
                {
                    $lets = array();
                    $dataString = strtoupper($adventure->other_strings[$condact->Param1]->Text);
                    $dataArray = explode(',', $dataString);

                    if (sizeof($dataArray)<2) Error('There is not data enough in XDATA condact');               

                    foreach ($dataArray as $i=>$element)
                    {
                        $element = trim($dataArray[$i]);
                        $var = filter_var($element, FILTER_VALIDATE_INT, array());
                        if (!$var) Error("Non integer value in XDATA condact element #$i '$element'");
                        if (($element < 0) || ($element > 255)) Error("XDATA values must be in the 0-255 range, element #$i is not ($element)");
                    }

                    $baseFlagno = $dataArray[0];
                    for ($i=1;$i<sizeof($dataArray);$i++)
                    {
                        if ($baseFlagno>255) Error('XDATA condact went over flag 255');
                        $element = trim($dataArray[$i]);
                        $let = dataToLet($baseFlagno, $element);
                        $lets[]= $let;
                        $baseFlagno++;
                    }

                    if (sizeof($lets)) 
                    {
                        array_splice($entry->condacts, $condactID, 1, $lets);
                        $condactID --; // As the current condact has been replaced with a sequentia of LETs, we move the pointer one step back 
                    }
                }
                else if ($condact->Opcode == XSPLITSCR_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 6; // Maluva function 6. Notice in case this condact is generated for a machine not supporting split screen it will just do nothing
                    $condact->Condact = 'EXTERN'; // XSPLITSCR X  ==> EXTERN X 6
                    if  ($subtarget!='UNO')  // If target does not support XSPLITSCR, replaces condact with "AT @38" (always true)
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
            }
        }
    }


    $terminatorOpcodes = array(22, 23,103, 116,117,108);  //DONE/OK/NOTDONE/SKIP/RESTART/REDO
    $condactsOffsets = array();
    // PASS ONE, GENERATE HASHES UNLESS CLASSICMODE IS ON OR ENTRY HAS JUMPS
    $condactsHash = array();
    if (!$adventure->classicMode)
    {
        for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
        {
            $process = $adventure->processes[$procID];
            for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
            {
                $entry = $process->entries[$entryID];
                for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
                {
                    $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                    if (($hash!='') && (!array_key_exists("$hash", $condactsHash)))
                    {
                        $hashInfo = new StdClass();
                        $hashInfo->offset = -1; // Not yet calculated
                        $hashInfo->details = new StdClass();
                        $hashInfo->details->process = $procID;
                        $hashInfo->details->entry = $entryID;
                        $hashInfo->details->condact = $condactID;
                        $condactsHash["$hash"] = $hashInfo;
                    }
                }
            }
        }
    }

    // Dump  all condacts and store which address each entry condacts
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            // Check entry condacts hashes (unless classicMode is on)
            $entry = $process->entries[$entryID];
            if (!$adventure->classicMode)
            {
                $hash = getCondactsHash($adventure,$entry->condacts, 0);
                if ($hash!='')
                {
                    if ($condactsHash["$hash"]->offset != -1)
                    {
                        $offset = $condactsHash["$hash"]->offset;
                        $condactsOffsets["${procID}_${entryID}"] = $offset;
                        continue; // Avoid generating this entry condacts, as there is one which can be re-used
                    }
                    else
                    {
                        addPaddingIfRequired($currentAddress);
                        $condactsHash["$hash"]->offset = $currentAddress;
                    }
                }
            } else addPaddingIfRequired($currentAddress);

            $condactsOffsets["${procID}_${entryID}"] = $currentAddress;
            $entry = $process->entries[$entryID];
            $terminatorFound = false;
            $eachCondactOffsets = array(); // This will keep the offeset of each condact like [0]->0x8383, [1]->0x8385, etc.
            $forwardCondactOffsets = array(); // For forward references, this will keep gaps to fill: [0x8452]->1. When the entry is finished we seek back in the
                                            // file and fill the gaps so gap  0x8452 is filled wit 0x8385 in the above sample
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $eachCondactOffsets[$condactID] = $currentAddress;

                $condact = $entry->condacts[$condactID];

                $opcode = $condact->Opcode;
                if (($opcode == EXTERN_OPCODE) && ($condact->Param2 == 8)) // Jumps
                {
                    $condactNum = $condact->Param3;
                    if ($condactNum<=$condactID)  // Its a back jump
                    {
                        $condact->Param3 = $eachCondactOffsets[$condactNum] & 0xFF;
                        $condact->Param4 = ($eachCondactOffsets[$condactNum] >> 8) & 0xFF;
                    }
                    else // It's forward jump
                    {
                        $forwardCondactOffsets[$bufferPTR + 3] = $condactNum; // Note down that in $bufferPTR+3 we have to replace the value with th offset of condact $condactNUM
                    }
                }
                if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue; // Not saving fake DEBUG condact if debug mode is not on.
                if ($opcode==FAKE_USERPTR_CONDACT_CODE)
                {
                    $usrextvec = $condact->Param1;
                    $adventure->extvec[$usrextvec] = $currentAddress;
                    echo "UserPtr #$usrextvec set to " . prettyFormat($currentAddress).  "\n";
                    continue; // Just save the extvec, do not save the fake condact
                }

                if ((!$adventure->classicMode))
                    //if (($currentAddress%2 == 0) || (!isPaddingPlatform($target))) // We can only partially re-use an entry if its word aligned or the platform does not require word alignment
                    //{
                        $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                        if ($hash!='')
                            if ($condactsHash["$hash"]->offset == -1) $condactsHash["$hash"]->offset = $currentAddress;
                    //}

                if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
                if (($opcode == FAKE_DEBUG_CONDACT_CODE) && ($adventure->verbose)) echo "Debug condact found, inserted.\n";
                writeByte($opcode);
                $currentAddress++;
                for($i=0;$i<$condact->NumParams;$i++)
                {
                    switch ($i)
                    {
                        case 0: $param = $condact->Param1;
                                writeByte($param);
                                break;

                        case 1: $param = $condact->Param2;
                                writeByte($param);
                                break;

                        case 2: $param = $condact->Param3;
                                writeByte($param);
                                break;
                        case 3: $param = $condact->Param4;
                                writeByte($param);
                                break;
                        case 4: $param = $condact->Param5;
                                writeByte($param);
                                break;
                        case 5: $param = $condact->Param6;
                                writeByte($param);
                                break;
                    }
                }
                $currentAddress+= $condact->NumParams;
                if ((!$adventure->classicMode) && (in_array($opcode, $terminatorOpcodes)))
                {
                    $terminatorFound = true;
                    if ($adventure->verbose)
                    {
                        if ($condactID != sizeof($entry->condacts) -1 ) // Terminator found, but additional condacts exists in the entry
                        {
                            $humanEntryID =$entryID + 1; // entryID increased so for human readability entries are from #1 to #n, not from #0 to #n
                            $verb = $entry->Verb;
                            $noun = $entry->Noun;
                            $condactName = $entry->condacts[$condactID+1]->Condact;
                            $terminatorName = $entry->condacts[$condactID]->Condact;
                            $entryText = $entry->Entry;
                            $dumped = ($adventure->classicMode) ? "has been" : "hasn't been";
                            echo "Warning: Condact '$condactName' found after a terminator '$terminatorName' in entry #$humanEntryID ($entryText) at process #$procID . Condact $dumped dumped to DDB file.\n";
                        }
                    }
                    break; // If a terminator condact found, no more condacts in the entry will be ever executed, so we break the loop (normally there won't be more condacts anyway)
                }
            }
            if  (($adventure->classicMode) || (!$terminatorFound)) // If no terminator condact found, ad termination fake condact 0xFF
            {
                writeFF(); // mark of end of entry
                $currentAddress++;
            }
            // Fix the forward jump references
            $preserverAddr = $currentAddress;
            foreach ($forwardCondactOffsets as $address=>$condactNumber)
            {
                seek($address);
                $patch = intval($eachCondactOffsets[$condactNumber]);
                writeWord($patch, $GLOBALS['isBigEndian']);
            }
            // move again to the end
            seekend();
        }
    }

    addPaddingIfRequired($currentAddress);
    // Dump the entries tables
    $processesOffsets = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        $processesOffsets["$procID"] = $currentAddress;
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            writeByte($entry->Verb);
            writeByte($entry->Noun);
            writeWord($condactsOffsets["${procID}_${entryID}"] , $GLOBALS['isBigEndian']);
            $currentAddress += 4;
        }
        WriteZero(); // Marca de fin de proceso, doble 00
        $currentAddress++;
        addPaddingIfRequired($currentAddress);
    }

    // Dump the processes table
    addPaddingIfRequired($currentAddress);
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        writeWord($processesOffsets["$procID"], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }
}

//================================================================= other ========================================================
function prependPlus3HeaderToDDB($outputFileName, $startAddress)
{

    $fileSize = filesize($outputFileName) + 128; // Final file size wit header
    $inputHandle = fopen($outputFileName, 'r');
    $outputHandle = fopen("prepend.tmp", "w");

    $header = array();
    $header[]= ord('P');
    $header[]= ord('L');
    $header[]= ord('U');
    $header[]= ord('S');
    $header[]= ord('3');
    $header[]= ord('D');
    $header[]= ord('O');
    $header[]= ord('S');
    $header[]= 0x1A; // Soft EOF
    $header[]= 0x01; // Issue
    $header[]= 0x00; // Version
    $header[]= $fileSize & 0XFF;  // Four bytes for file size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= ($fileSize & 0xFF0000) >> 16;
    $header[]= ($fileSize & 0xFF000000) >> 24;
    $header[]= 0x03; // Bytes:
    $fileSize -= 128; // Get original size
    $header[]= $fileSize & 0x00FF;  // Two bytes for data size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= $startAddress & 0x00FF;  // Two Bytes for load addres
    $header[]= ($startAddress & 0xFF00) >> 8;
    while (sizeof($header)<127) $header[]= 0; // Fillers
    $checksum = 0;
    for ($i=0;$i<127;$i++)  $checksum+=$header[$i];
    $header[]= $checksum & 0xFF; // Checksum

    // Dump header
    for ($i=0;$i<128;$i++) fputs($outputHandle, chr($header[$i]), 1);

    // Dump original DDB
    while (!feof($inputHandle))
    {
        $c = fgetc($inputHandle);
        fputs($outputHandle,$c,1);
    }
    fclose($inputHandle);
    fclose($outputHandle);
    unlink($outputFileName);
    rename("prepend.tmp" ,$outputFileName);
}

function dataToLet($flagno, $value)
{
    $condact = new stdClass();
    $condact->NumParams = 2;
    $condact->Indirection1 = 0;
    $condact->Param1 = $flagno;
    $condact->Param2 = $value;
    $condact->Condact ='LET';
    $condact->Opcode = LET_OPCODE;
    return $condact;
}

//This function will move messages from MTX to XMESSAGES it they overflow the size of the Spectrum bank
function moveMessagesToXmessages($adventure)
{
    // Skip this step if size of MTX is less than 16 Kb
    if (getSizeMTX($adventure) <= 16*1024) return $adventure;

    // Find maximum xMessage index
    $xMessNextId = -1;
    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $xmsg = $adventure->xmessages[$i];
        if ($xmsg->Value > $xMessNextId) $xMessNextId = $xmsg->Value;
    }
    $xMessNextId += 1;

    // Extract messages until MTX is less than 16Kb
    $messagesToTransfer = array();
    while (getSizeMTX($adventure) > 16*1024)   //Do this until MTX is less than bank size.
    {
        $msg = array_pop($adventure->messages);
        $id = $msg->Value;
        $messagesToTransfer[$id] = $msg;
    }

    // Search for condacts with the extracted messages and rewrite transfered Messages as xMessages
    $messageToXMes = array();
    $mesToXMes = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if (($condact->Opcode == MES_OPCODE) && ($condact->Indirection1 == 0) && 
                    array_key_exists($condact->Param1, $messagesToTransfer))
                {
                    $msgId = $condact->Param1;
                    if (array_key_exists($msgId, $mesToXMes))
                    {
                        //We already have this message transferred.
                        $xMessId = $mesToXMes[$msgId];
                    } else {
                        //insert message on xMessages
                        $xMessId = $xMessNextId;
                        $xMessNextId += 1;
                        $mesToXMes[$msgId] = $xMessId;

                        $msg = clone($messagesToTransfer[$msgId]);
                        $msg->Value = $xMessId;
                        $adventure->xmessages[] = $msg;

                        echo "Warning: MTX message $msgId will be replaced with xMessage $xMessId.\n";
                    }
                    //Convert MES into XMESS
                    $condact->Opcode = XMES_OPCODE;
                    $condact->Condact = 'XMES';
                    $condact->Param1 = $xMessId;

                }
                elseif (($condact->Opcode == MESSAGE_OPCODE) && ($condact->Indirection1 == 0) && 
                    array_key_exists($condact->Param1, $messagesToTransfer))
                {
                    $msgId = $condact->Param1;
                    if (array_key_exists($msgId, $messageToXMes))
                    {
                        //We already have this message transferred.
                        $xMessId = $messageToXMes[$msgId];
                    } else {
                        //insert message on xMessages
                        $xMessId = $xMessNextId;
                        $xMessNextId += 1;
                        $messageToXMes[$msgId] = $xMessId;

                        // Since MESSAGE prints a NewLine at the end, we add it now:
                        $msg = clone($messagesToTransfer[$msgId]);
                        $msg->Value = $xMessId;
                        $msg->Text = ($msg->Text).chr(13);
                        $msg->originalText = ($msg->originalText).chr(13);
                        $adventure->xmessages[] = $msg;

                        echo "Warning: MTX message $msgId will be replaced with xMessage $xMessId.\n";
                    }
                    //Convert MESSAGE into XMESS
                    $condact->Opcode = XMES_OPCODE;
                    $condact->Condact = 'XMES';
                    $condact->Param1 = $xMessId;
                }
            }
        }
    }
    return $adventure;
}

//********************************************** XPLAY *************************************************************** */

function mmlToBeep($note, &$values, $subtarget)
{
    
    $condact = NULL;
    $noteIdx = array('C'=>0, 'C#'=>1, 'D'=>2, 'D#'=>3, 'E'=>4,  'F'=>5, 'F#'=>6, 'G'=>7, 'G#'=>8, 'A'=>9, 'A#'=>10, 'B'=>11,
                     'C+'=>1,         'D+'=>3,         'E+'=>5, 'F+'=>6,         'G+'=>8,         'A+'=>10,         'B+'=>12,
                     'C-'=>-1,        'D-'=>1,         'E-'=>3, 'F-'=>4,         'G-'=>6,         'A-'=>8,          'B-'=>10);
    $baseLength = 195;

    $cmd = $note[0];
    // ############ Note: [A-G][#:halftone][num:length][.:period]
    if ($cmd>='A' && $cmd<='G') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1); 
        }
        $length = $values[XPLAY_LENGTH] / $period;
        
        $end = 1;                           //Note index
        if (@$note[1]=='#' || @$note[1]=='-' || @$note[1]=='+') $end++;
        $idx = $noteIdx[substr($note, 0, $end)];
        
        if ($end<strlen($note))             //Length
            $length = intval(substr($note, $end)) / $period;

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        if ($length==0) Error('Wrong length at note ' . $note);
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 24 + $values[XPLAY_OCTAVE]*24 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Note lenght [1-64] (1=full note, 2=half note, 3=third note, ..., default:4)
    if ($cmd=='L') {
        $values[XPLAY_LENGTH] = intval(substr($note, 1));
    } else
    // ############ Pause [1-64] (1=full pause, 2=half pause, 3=third pause, ...)
    if ($cmd=='R') {
        $period = 1;
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        if (strlen($note)>1)
            $length = intval(substr($note, 1)) / $period;

        $condact = new stdClass();
        $condact->Opcode = PAUSE_OPCODE;
        $condact->NumParams = 1;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Indirection1 = 0;
        $condact->Condact = 'PAUSE';
    } else
    // ############ Note Pitch [0-96]
    if ($cmd=='N') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $idx = intval(@substr($note, 1));    //Note index

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 48 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Octave [1-8] (default:4)
    if ($cmd=='O') {
        $values[XPLAY_OCTAVE] = intval(substr($note, 1));
    } else
    // ############ Tempo [32-255] (indicates the number of quarter notes per minute, default:120)
    if ($cmd=='T') {
        $values[XPLAY_TEMPO] = (intval(substr($note, 1)) & 255);
    } else
    // ############ Volume [0-15] (default:8)
    if ($cmd=='V') {
        $values[XPLAY_VOLUME] = intval(substr($note, 1)) & 15;  //Volume can be changed using SFX (direct access to PSG registers).
    } else
    // ############ Decreases one octave
    if ($cmd=='<') {
        if ($values[XPLAY_OCTAVE]>1) $values[XPLAY_OCTAVE]--;
    } else
    // ############ Increases one octave
    if ($cmd=='>') {
        if ($values[XPLAY_OCTAVE]<8) $values[XPLAY_OCTAVE]++;
    }
    return $condact;
}
//********************************************** Palette **************************************************************** */

$defaultPalette = array(0, 7, 2, 3, 4, 5, 6, 1, 16+0, 16+7, 16+2, 16+3, 16+4, 16+5, 16+6, 16+1);

function parsePaletteData($paletteData, &$palette)
{
    if (!array_key_exists("colors", $paletteData)) return false;
    if(sizeof($paletteData->colors)!=16) return false;
    for($i=0;$i<16;$i++)
    {
        if (!array_key_exists("color", $paletteData->colors[$i])) return false;
        $value = $paletteData->colors[$i]->color;
        if (!is_numeric($value)) return false;
        $value = intval($value);
        if($value < 0 || $value > 7) return false;
        if (array_key_exists("bright", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->bright)) return false;
            if($paletteData->colors[$i]->bright) $value+=8;
        }
        if (array_key_exists("flash", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->flash)) return false;
            if($paletteData->colors[$i]->flash) $value+=16;
        }
        $palette[$i] = $value;
    }
    return true;
}

//********************************************** MAIN **************************************************************** */
function Syntax()
{
    echo("SYNTAX: php drb128.php [options] <target> <language> <sublang> <chars> <inputfile> <charsetfile>\n\n");
    echo("+ [options]: one or more of the following:\n");
    echo ("              -v    : Verbose output\n");
    echo ("              -3    : Prepend +3 header to ADx files (3h stands for 'Three header')\n");
    echo ("              -d    : Forced debug mode\n");
    echo ("              -c    : Forced classic mode\n");
    echo ("              -b    : Use best fit algorithm when assigning the memory banks (first fit by default)\n");
    echo ("  -o [output file]  : (optional) path & file name of output files. If absent, same name of json file would be used.\n");
    echo ("  -i [image path]   : (optional) the path to search for images. Only for TAPE target.\n");
    echo ("  -p [palette file] : (optional) path & file name of palette definition JSON file.\n");
    echo ("  -t [token path]   : (optional) path & file name to token file for text compression.\n");
    echo ("  -k [char. id]     : (optional) character code for the cursor.\n");
    echo ("  -x [bank]         : (optional) number of the memory bank to exclude.\n");
    echo "\n";
    echo("+ <target>: The machine objetive. Valid values: TAPE and PLUS3.\n");
    echo("+ <language>: game language, should be 'EN', 'ES', 'DE', 'FR' or 'PT' (English, Spanish, German, French or Portuguese).\n");
    echo("+ <sublang>: interpreter language, should be 'EN' or 'ES' (English or Spanish).\n");
    echo("+ <chars>: Number of character per line. Valid values 42 and 32.\n");
    echo("+ <inputfile>: a json file generated by DRF.\n");
    echo("+ <charsetfile>: a file with the embedded charset. This file is a 2048 bytes file with the definition of a charset \n");
    echo("                 (o bytes per character, 256 characters)\n");
    echo "\n";
    echo "Examples:\n";
    echo "php drb128 tape es es 42 game.json charset.chr\n";
    echo "php drb128 -cd tape en en 42 game.json charset.chr\n";
    echo "php drb128 -bv -o mygame.ad0 plus3 en en 32 game.json charset.chr\n";
    echo "\n";
    echo "Text compression will use the built in tokens for each language unless an alternative token file is supplied.\n";
    echo "To know about the TOK file content format look for the default tokens array in DRB source code.\n";
    echo "\n";
    echo "The image files must be SCR compressed with the DCP compressor and with the name like 001.DCP.\n";
    echo "where this image will be the number of the location where it will show.\n";
    exit(1);
}

if (intval(date("Y"))>2018) $extra = '-'.date("Y"); else $extra = '';
echo "DAAD Reborn Compiler Backend for ZX Spectrum 128 ".VERSION_HI.".".VERSION_LO. " (C) Uto 2018$extra & Cronomantic\n";
if (!function_exists ('utf8_encode')) Error('This software requires php-xml package, please use yum or apt-get to install it.');

$rest_index = null;
$opts = getopt('3vcdbo:i:k:p:t:x:', [], $rest_index);
$posArgs = array_slice($argv, $rest_index);

if (sizeof($posArgs) < 6) Syntax();

$nextParam = 0;
$subtarget = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($subtarget!='TAPE') && ($subtarget!='PLUS3')) Error("Invalid subtarget '$subtarget'");

$language = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($language!='ES') && ($language!='EN') && ($language!='DE') && ($language!='PT') && ($language!='FR')) Error('Invalid target language');

$sublang = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($sublang!='ES') && ($sublang!='EN')) Error('Invalid interpreter language');

$numchars = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($numchars!='42') && ($numchars!='32')) Error('Invalid number of characters per line');

$inputFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($inputFileName)) Error('File not found');
$json = file_get_contents($inputFileName);
$adventure = json_decode(utf8_encode($json));
if (!$adventure)
{
    $error = 'Invalid json file: ';
    switch (json_last_error())
    {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
    }
    Error($error);
}

// Get token filename
$tokensFilename = '';
if (array_key_exists('t', $opts))
{
    $tokensFileName = $opts['t'];
    if (!file_exists($tokensFilename)) Error('Tokens file not found');
}

// Charset file
$charsetFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($charsetFileName)) Error('Charset file not found');
if (filesize($charsetFileName) != 2048) Error('Charset file size invalid');

// Parse optional parameters
$adventure->prependPlus3Header = array_key_exists('3', $opts);
$adventure->verbose = array_key_exists('v', $opts);
$adventure->forcedClassicMode = array_key_exists('c', $opts);
$adventure->forcedDebugMode = array_key_exists('d', $opts);
$adventure->forcedPadding = false;
$adventure->useBestFit = array_key_exists('b', $opts);

$bankReserved=0;
if (array_key_exists('x', $opts))
{
    $bankReserved=$opts['x'];
    if(!is_numeric($bankReserved)) Error("Reserved bank is not a valid value");
    $bankReserved=intval($bankReserved);
    if ($bankReserved < 1 || $bankReserved > 7 ||
        $bankReserved == 2 || $bankReserved == 5) Error("Invalid bank to reserve");
    if ($subtarget == 'PLUS3' && $bankReserved >= 6) Error("Bank not available on +3");
}

$cursorCode = 0x5f;
if (array_key_exists('k', $opts))
{
    $cursorCode = $opts['k'];
    if(!is_numeric($cursorCode)) Error("Cursor code is not a number");
    $cursorCode = intval($cursorCode);
    if ($cursorCode < 0 || $cursorCode > 255) Error("Invalid cursor code value");
}

$outputFileName = '';
if (array_key_exists('o', $opts)) $outputFileName = $opts['o'];
if ($outputFileName == '') $outputFileName = $inputFileName;
$outputFileName = replace_extension($outputFileName, 'AD0');
if ($outputFileName == $inputFileName) Error('Input and output file name cannot be the same');

// Gets the screen files
$screenFileSizes = array();
$screenFileNames = array();
$screenFilesPath = '';
if (array_key_exists('i', $opts))
{
    if ($subtarget!='TAPE')
    {
        Error('Images on memory only available for TAPE subtarget');
    } else {
        $screenFilesPath = $opts['i'];
    }
}
if ($screenFilesPath != '')
{
    if (!is_dir($screenFilesPath)) Error("Invalid path for images.");
    $fileList = glob($screenFilesPath . '/[0-9][0-9][0-9].DCP');
    foreach($fileList as $screenFileName){
        if(is_file($screenFileName)){
            if ((filesize($screenFileName) > 6912)||(filesize($screenFileName)==0)) Error("File '$screenFileName' is surely not an image file.");
            $screenFileSizes[basename($screenFileName, '.DCP')] = filesize($screenFileName);
            $screenFileNames[basename($screenFileName, '.DCP')] = $screenFileName;
        }
    }
}
if (sizeof($screenFileNames) > 255) Error("Too many image files");

$palette = $defaultPalette;
if (array_key_exists('p', $opts))
{
    $paletteFileName = $opts['p'];
    if (!file_exists($paletteFileName)) Error('Palette file not found');
    $json = file_get_contents($paletteFileName);
    $paletteData = json_decode(utf8_encode($json));
    if (!$paletteData)
    {
        $error = 'Invalid palette json file: ';
        switch (json_last_error())
        {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
        }
        Error($error);
    }
    if (!parsePaletteData($paletteData, $palette)) Error("Error in palette JSON");
}

//Interpreter selection
$interpreterFile = $interpreters[$subtarget][$sublang][$numchars];
$interpreterFile = base64_decode($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = gzuncompress($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = string2intArr($interpreterFile);
$interpreterSize = sizeof($interpreterFile);
if (( $interpreterSize == 0)||($interpreterSize > (0xC000 - 0x6000))) Error("Interpreter does not have a valid size.");

if ($adventure->verbose) echo ("Verbose mode on\n");

// Create the vectors for extens and USRPTR
$adventure->extvec = array();
for ($i=0;$i<13;$i++) $adventure->extvec[$i] = 0;

// Replace special characters over ASCII 127 and escape chars.
replaceEscapeChars($adventure);
checkStrings($adventure);

// Check settings in JSON
$adventure->classicMode = $adventure->settings[0]->classic_mode;
if ($adventure->forcedClassicMode) $adventure->classicMode = true;
$adventure->debugMode = $adventure->settings[0]->debug_mode;
if ($adventure->forcedDebugMode) $adventure->debugMode = true;

if ($adventure->verbose)
{
    if ($adventure->classicMode) echo "Classic mode ON, optimizations disabled.\n"; else echo "Classic mode OFF, optimizations enabled.\n";
    if ($adventure->debugMode) echo "Debug mode ON, generating DEBUG information for ZesarUX debugger.\n";
    if ($adventure->forcedPadding) echo "Padding has been forced.\n";
}

$baseAddress = 0x6000;
$baseAddressBanks = 0xC000;
$screenBufferSize = 0x1B06;
$diskBufferSize = 0x1000;

$bankCurrentAddress = array(
    0 => $baseAddress,
    1 => $baseAddressBanks,
    3 => $baseAddressBanks,
    4 => $baseAddressBanks,
    6 => $baseAddressBanks,
    7 => $baseAddressBanks
);

$bankSizeAvailable = array(
    0 => 0x10000 - $baseAddress,
    1 => 0x10000 - $baseAddressBanks,
    3 => 0x10000 - $baseAddressBanks,
    4 => 0x10000 - $baseAddressBanks,
    6 => 0x10000 - $baseAddressBanks,
    7 => 0x10000 - $baseAddressBanks
);

// Special case for plus3, the bank 7 is not available and needs some cache
if ($subtarget == 'PLUS3')
{
    $bankSizeAvailable[6] = $bankSizeAvailable[6] - $diskBufferSize - $screenBufferSize;
    $bankSizeAvailable[7] = 0;
}

//Reserving a bank
if ($bankReserved != 0)
{
    $bankSizeAvailable[$bankReserved] = 0;
    if ($adventure->verbose) echo "Bank $bankReserved reserved.\n";
}

$currBank = 0;
$currBuffer = $currBank;

// **************************************************
// 1 ************** WRITE INTERPRETER ***************
// **************************************************
//Write pointer to header
writeWord(($interpreterSize + $baseAddress + 2), $GLOBALS['isBigEndian']);

$interpreterSize = writeBytes($interpreterFile);
if (!$interpreterSize) Error('Can\'t copy interpreter');
if ($adventure->verbose) echo "Interpreter copied: $interpreterSize bytes";
$interpreterSize += 2;
//Updating current address
$bankCurrentAddress[$currBank] += $interpreterSize;

// *********************************************
// 1 ************** WRITE HEADER ***************
// *********************************************
// DAAD version
$b = 3;
writeByte($b);

// Machine and language
$b = 0x01;   // Spectrum
$b = $b << 4; // Move machine ID to high nibble
if (($language=='ES') || ($language=='PT')) $b = $b | 1; // Set spanish language  (DE and EN keep English)
writeByte($b);

// This byte stored the null character, usually underscore, as set in /CTL section. That's why all classic  DDBs have same value: 95. For new targets (MSX2) we use that byte for subtarget information.
$b = 95;
writeByte($b);

// Number of object descriptions
$numberOfObjects = sizeof($adventure->object_data);
writeByte($numberOfObjects);
// Number of location descriptions
$numberOfLocations = sizeof($adventure->locations);
writeByte($numberOfLocations);
// Number of user messages
$numberOfMessages = sizeof($adventure->messages);
writeByte($numberOfMessages);
// Number of system messages
$numberOfSysmess = sizeof($adventure->sysmess);
writeByte($numberOfSysmess);
// Number of processes
$numberOfProcesses = sizeof($adventure->processes);
writeByte($numberOfProcesses);

// Fill the rest of the header with zeros, as we don't know yet the offset values. Will comeupdate them later.
writeBlock((0x3A-0x08) + 16 + (2*13));
$bankCurrentAddress[$currBank]+= (0x3A + 16 + (2*13));

$compressedTextOffset = 0;
$processListOffset = 0;
$objectLookupOffset = 0;
$locationLookupOffset = 0;
$messageLookupOffset = 0;
$sysmessLookupOffset = 0;
$connectionsLookupOffset = 0;
$vocabularyOffset = 0;
$initiallyAtOffset = 0;
$objectNamesOffset = 0;
$objectWeightAndAttrOffset = 0;
$objectExtraAttrOffset = 0;
$charsetLookupOffset = 0;
$imageIdxLookupOffset = 0;
$objectBufferOffset = 0;
$objectLookupBank = 0;
$locationLookupBank = 0;
$messageLookupBank = 0;
$sysmessLookupBank = 0;
$charsetLookupBank = 0;
$imageIdxLookupBank = 0;
$xmess0LookupOffset = 0;
$xmess0LookupBank = 0;
$xmess1LookupOffset = 0;
$xmess1LookupBank = 0;
$xmess2LookupOffset = 0;
$xmess2LookupBank = 0;
$xmess3LookupOffset = 0;
$xmess3LookupBank = 0;

// *********************************************
// 2 *************** DUMP DATA *****************
// *********************************************

// Replace all escape and spanish chars in the input strings with the ASCII codes used by DAAD interpreters
$compressionData = null;
$bestTokensDetails = null;

if (file_exists($tokensFilename))
{
    if ($adventure->verbose) echo "Loading tokens from $tokensFilename.\n";
    $compressionJSON = file_get_contents($tokensFilename);
}
else
{
    if ($adventure->verbose) echo "Loading default compression tokens for '$language'.\n";
    switch ($language)
    {
        case 'EN': $compressionJSON = $compressionJSON_EN; break;
        case 'PT': $compressionJSON = $compressionJSON_PT; break;
        case 'DE': $compressionJSON = $compressionJSON_DE; break;
        case 'FR': $compressionJSON = $compressionJSON_FR; break;
        default : $compressionJSON = $compressionJSON_ES; break;
    }
}

$compressionData = json_decode($compressionJSON);


if (!$compressionData) Error('Invalid tokens file');
$hasTokens = ($compressionData->compression!='none');

for ($j=0;$j<sizeof($compressionData->tokens);$j++)
{
    $token = $compressionData->tokens[$j];
    $token = hex2str($token);
    $compressionData->tokens[$j] = $token;
}

// *********************************************
// 3 *************** DUMP DATA *****************
// *********************************************
// DumpExterns
generateExterns($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump Vocabulary
$vocabularyOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Vocabulary        [" . prettyFormat($vocabularyOffset) . "][$currBank]\n";
generateVocabulary($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump tokens for compression and compress text sections (if possible)
if ($hasTokens) $compressedTextOffset = $bankCurrentAddress[$currBank]; else $compressedTextOffset = 0; // If no compression, the header should have 0x0000 in the compression pointer
if ($adventure->verbose) echo "Tokens            [" . prettyFormat($compressedTextOffset) . "][$currBank]\n";
generateTokens($adventure , $bankCurrentAddress[$currBank], $hasTokens, $compressionData, $textSavings);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Connections
generateConnections($adventure, $bankCurrentAddress[$currBank]);
$connectionsLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations) ;
if ($adventure->verbose) echo "Connections       [" . prettyFormat($connectionsLookupOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Object names
$objectNamesOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Object words      [" . prettyFormat($objectNamesOffset) . "][$currBank]\n";
generateObjectNames($adventure, $bankCurrentAddress[$currBank]);
// Weight & standard Attr
$objectWeightAndAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Weight & std attr [" . prettyFormat($objectWeightAndAttrOffset) . "][$currBank]\n";
generateObjectWeightAndAttr($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Extra Attr
$objectExtraAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Extra attr        [" . prettyFormat($objectExtraAttrOffset) . "][$currBank]\n";
generateObjectExtraAttr($adventure, $bankCurrentAddress[$currBank]);
// InitiallyAt
$initiallyAtOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Initially at      [" . prettyFormat($initiallyAtOffset) . "][$currBank]\n";
generateObjectInitially($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
//Object buffer
$objectBufferOffset = $bankCurrentAddress[$currBank];
writeBlock($numberOfObjects * 5);
$bankCurrentAddress[$currBank]+= ($numberOfObjects * 5);
if ($adventure->verbose) echo "Object buffer      [" . prettyFormat($objectBufferOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);

// Move messages to xMessages if MTX is too big
$adventure = moveMessagesToXmessages($adventure);

// Generate XMessagess if avaliable
$xMessages = generateXMessages($adventure);


// Dump Processes
generateProcesses($adventure, $bankCurrentAddress[$currBank], $subtarget);
$processListOffset = $bankCurrentAddress[$currBank] - sizeof($adventure->processes) * 2;
if ($adventure->verbose) echo "Processes         [" . prettyFormat($processListOffset) . "][$currBank]\n";

//Updating size available
$bankSizeAvailable[$currBank] -= ($bankCurrentAddress[$currBank] - $baseAddress);


// ***********************************************
// 4 ********* Reorganize blocks *****************
// ***********************************************

$blockSize = array(
    'CHR' => filesize($charsetFileName),
    'STX' => getSizeSTX($adventure),
    'MTX' => getSizeMTX($adventure),
    'OTX' => getSizeOTX($adventure),
    'LTX' => getSizeLTX($adventure),
    'XMES0' => sizeof($xMessages[0]),
    'XMES1' => sizeof($xMessages[1]),
    'XMES2' => sizeof($xMessages[2]),
    'XMES3' => sizeof($xMessages[3]),
);

if (sizeof($screenFileSizes) > 0)
{
    $blockSize['PICIDX'] = 4 * sizeof($screenFileSizes);
    foreach ($screenFileSizes as $scrKey => $scrSize) $blockSize[$scrKey] = $scrSize;
}

if ($adventure->verbose) echo "Blocks to assign:\n";
foreach($blockSize as $currBlock => $bSize)
{
    if ($adventure->verbose) echo "Block $currBlock: $bSize bytes.\n";
    if ($bSize > 16*1024)
    {
        Error("Block " . $currBlock . " has more of 16kb, can not be allocated!\n");
    }
}

// Stores bank id of the block allocated to a block
// Initially no bank is assigned to any block
$blockBank = array_fill_keys(array_keys($blockSize), -1);

// pick each block and find suitable bank
// according to its size and assign to it
foreach(array_keys($blockSize) as $currBlock)
{
    $bestIdx = -1;
    foreach(array_keys($bankCurrentAddress) as $currBank)
    {
        // Find the best fit bank for current block
        if($bankSizeAvailable[$currBank] >= $blockSize[$currBlock])
        {
            if ($bestIdx == -1)
                $bestIdx = $currBank;
            elseif ($adventure->useBestFit && ($bankSizeAvailable[$bestIdx] > $bankSizeAvailable[$currBank]))
                $bestIdx = $currBank;
        }
    }
    // If we could find a block for current block
    if ($bestIdx != -1)
    {
        // allocate bank j to p[i] block
        $blockBank[$currBlock] = $bestIdx;
        // Reduce available memory in this bank
        $bankSizeAvailable[$bestIdx] -= $blockSize[$currBlock];
    }
}

//Checking if all blocks have been assigned
if (in_array(-1, $blockBank)) {
    echo "Unassigned blocks:\n";
    foreach($blockBank as $currBlock => $bIndex)
    {
        if ($bIndex == -1)
        {
            $bSize = $blockSize[$currBlock];
            echo "Block $currBlock: $bSize bytes not assigned!\n";
        }
    }
    Error("Can not allocate the data on RAM");
}

// *********************************************
// 5 ********* DUMP OTHER DATA *****************
// *********************************************

$imageLookupOffset = array();
$imageLookupBank = array();
foreach($blockBank as $currBlock => $currBank)
{
    $currBuffer = $currBank;
    switch($currBlock)
    {
        case 'CHR':
            //Character Set
            $size = writeFile($charsetFileName);
            if (!$size) Error('Can\'t copy set file');
            $charsetLookupOffset = $bankCurrentAddress[$currBank];
            $charsetLookupBank = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Character Set     [" . prettyFormat($charsetLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'STX':
            // Sysmess
            generateSTX($adventure, $bankCurrentAddress[$currBank]);
            $sysmessLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->sysmess);
            $sysmessLookupBank = $currBank;
            if ($adventure->verbose) echo "Sysmess           [" . prettyFormat($sysmessLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'MTX':
            generateMTX($adventure, $bankCurrentAddress[$currBank]);
            $messageLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->messages);
            $messageLookupBank = $currBank;
            if ($adventure->verbose) echo "Messages          [" . prettyFormat($messageLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'OTX':
            generateOTX($adventure, $bankCurrentAddress[$currBank]);
            $objectLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->object_data);
            $objectLookupBank = $currBank;
            if ($adventure->verbose) echo "Object texts      [" . prettyFormat($objectLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'LTX':
            generateLTX($adventure, $bankCurrentAddress[$currBank]);
            $locationLookupOffset =  $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations);
            $locationLookupBank = $currBank;
            if ($adventure->verbose) echo "Locations         [" . prettyFormat($locationLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'XMES0':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[0]);
            if ($size > 0) {
                $xmess0LookupOffset = $bankCurrentAddress[$currBank];
                $xmess0LookupBank = $currBank;
                appendBuffer($xMessages[0]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 0  [" . prettyFormat($xmess0LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES1':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[1]);
            if ($size > 0) {
                $xmess1LookupOffset = $bankCurrentAddress[$currBank];
                $xmess1LookupBank = $currBank;
                appendBuffer($xMessages[1]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 1  [" . prettyFormat($xmess1LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES2':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[2]);
            if ($size > 0) {
                $xmess2LookupOffset = $bankCurrentAddress[$currBank];
                $xmess2LookupBank = $currBank;
                appendBuffer($xMessages[2]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 2  [" . prettyFormat($xmess2LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES3':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[3]);
            if ($size > 0) {
                $xmess3LookupOffset = $bankCurrentAddress[$currBank];
                $xmess3LookupBank = $currBank;
                appendBuffer($xMessages[3]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 3  [" . prettyFormat($xmess3LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'PICIDX': //Do nothing for now
            break;
        default: //Image File
            $size = writeFile($screenFileNames[$currBlock]);
            if (!$size) Error('Can\'t copy image file');
            $imageLookupOffset[$currBlock] = $bankCurrentAddress[$currBank];
            $imageLookupBank[$currBlock] = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Picture $currBlock       [" . prettyFormat($imageLookupOffset[$currBlock]) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
    }
}

if (sizeof($imageLookupOffset) > 0)
{
    $currBank = $blockBank['PICIDX'];
    $currBuffer = $currBank;
    $imageIdxLookupOffset = $bankCurrentAddress[$currBank];
    $imageIdxLookupBank = $currBank;
    foreach($imageLookupOffset as $currBlock => $currAddr)
    {
        writeByte(intval($currBlock));
        writeByte($imageLookupBank[$currBlock]);
        writeWord($currAddr, $GLOBALS['isBigEndian']);
        $bankCurrentAddress[$currBank] += 4;
    }
    if ($adventure->verbose) echo "Picture Idx       [" . prettyFormat($imageIdxLookupOffset) . "][$currBank]\n";
    addPaddingIfRequired($bankCurrentAddress[$currBank]);
} else {
    $imageIdxLookupOffset = 0;
    $imageIdxLookupBank = 0;
}

// *********************************************
// 6 **** PATCH HEADER WITH OFFSET VALUES ******
// *********************************************
$currBuffer = 0;
seek(8 + $interpreterSize);
// Compressed text position
writeWord($compressedTextOffset, $GLOBALS['isBigEndian']);
// Process list position
writeWord($processListOffset, $GLOBALS['isBigEndian']);
// Objects lookup list position
writeWord($objectLookupOffset, $GLOBALS['isBigEndian']);
// Locations lookup list position
writeWord($locationLookupOffset, $GLOBALS['isBigEndian']);
// User messages lookup list position
writeWord($messageLookupOffset, $GLOBALS['isBigEndian']);
// System messages lookup list position
writeWord($sysmessLookupOffset, $GLOBALS['isBigEndian']);
// Connections lookup list position
writeWord($connectionsLookupOffset, $GLOBALS['isBigEndian']);
// Vocabulary
writeWord($vocabularyOffset, $GLOBALS['isBigEndian']);
// Objects "initialy at" list position
writeWord($initiallyAtOffset, $GLOBALS['isBigEndian']);
// Object names positions
writeWord($objectNamesOffset, $GLOBALS['isBigEndian']);
// Object weight and container/wearable attributes
writeWord($objectWeightAndAttrOffset, $GLOBALS['isBigEndian']);
// Extra object attributes
writeWord($objectExtraAttrOffset, $GLOBALS['isBigEndian']);

//Beginning the new header fields here...
// Xtra messages 0
writeWord($xmess0LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 1
writeWord($xmess1LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 2
writeWord($xmess2LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 3
writeWord($xmess3LookupOffset, $GLOBALS['isBigEndian']);
//Number of bank of the image index 0
writeByte($xmess0LookupBank);
//Number of bank of the image index 1
writeByte($xmess1LookupBank);
//Number of bank of the image index 2
writeByte($xmess2LookupBank);
//Number of bank of the image index 3
writeByte($xmess3LookupBank);

//Position of the font
writeWord($charsetLookupOffset, $GLOBALS['isBigEndian']);
//Position of the image index
writeWord($imageIdxLookupOffset, $GLOBALS['isBigEndian']);
//Object Buffer
writeWord($objectBufferOffset, $GLOBALS['isBigEndian']);
//Number of images
writeByte(sizeof($imageLookupOffset));
//Number of bank of object descriptions
writeByte($objectLookupBank);
//Number of bank of location descriptions
writeByte($locationLookupBank);
//Number of bank of user messages
writeByte($messageLookupBank);
//Number of bank of system messages
writeByte($sysmessLookupBank);
//Number of bank of character ser
writeByte($charsetLookupBank);
//Number of bank of the image index
writeByte($imageIdxLookupBank);
//Code of the character used as a cursor.
writeByte($cursorCode);

for($i=0;$i<16;$i++)
    writeByte($palette[$i]);

for($i=0;$i<13;$i++)
    writeWord($adventure->extvec[$i],$GLOBALS['isBigEndian']);

//Flush all buffers
if ($adventure->verbose) summary($adventure);
if ($textSavings>0) echo "Text compression saving: $textSavings bytes.\n";

foreach($bankSizeAvailable as $currBank => $bankSize)
{
    echo "Bank $currBank: $bankSize bytes available.\n";
}

foreach (array_keys($buffer) as $currBank)
{
    $currBuffer = $currBank;
    if (sizeBuffer() > 0)
    {
        $outputFileName = replace_extension($outputFileName, 'AD'.$currBank);
        $outputFileHandler = fopen($outputFileName, "wb");
        if (!$outputFileHandler) Error("Couldn't create file '$outputFileName'.\n");
        flushBuffer($outputFileHandler);
        fclose($outputFileHandler);
        if ($currBank == 0) $address = $baseAddress; else $address = $baseAddressBanks;
        if ($adventure->verbose)
            echo "File $outputFileName for ZXB-DAAD created. Loads at ".prettyFormat($address)." on bank $currBank.";

        if ($adventure->prependPlus3Header)
        {
            prependPlus3HeaderToDDB($outputFileName, $address);
            if ($adventure->verbose) echo (" +3DOS header added\n");
        }
        else if ($adventure->verbose) echo "\n";
    }
}

exit(0);
