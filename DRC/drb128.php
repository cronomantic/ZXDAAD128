<?php
// (C) Uto, Jose Manuel Ferrer & Cronomantic 2019 - This code is released under the GPL v3 license
// This is a fork of the backend of DAAD reborn compiler by Uto & Jose Manuel Ferrer for generate
// the data blocks for the banks for a ZX Spectrum or upper model.


//================================================================= Main globals ========================================================

global $adventure;
global $isBigEndian;
global $xMessageOffsets;
global $maxFileSizeForXMessages;

$isBigEndian = false;

define('VERSION_HI',0);
define('VERSION_LO',7);

define('FAKE_DEBUG_CONDACT_CODE',220);
define('FAKE_USERPTR_CONDACT_CODE',256);
define('XMES_OPCODE', 128);
define('XPICTURE_OPCODE',130);
define('XSAVE_OPCODE',131);
define('XLOAD_OPCODE',132);
define('XPART_OPCODE',133);
define('XPLAY_OPCODE',134);
define('XBEEP_OPCODE',135);
define('XSPLITSCR_OPCODE',136);
define('XUNDONE_OPCODE',137);
define('XNEXTCLS_OPCODE',138);
define('XNEXTRST_OPCODE',139);
define('XSPEED_OPCODE',140);
define('XDATA_OPCODE',142);
define('LET_OPCODE',51);

define('SFX_OPCODE',    18);
define('PAUSE_OPCODE',  35);
define('EXTERN_OPCODE', 61);
define('BEEP_OPCODE',   64);
define('AT_OPCODE', 0);
define('PROCESS_OPCODE',75);

define('XPLAY_OCTAVE', 0);
define('XPLAY_VOLUME', 1);
define('XPLAY_LENGTH', 2);
define('XPLAY_TEMPO',  3);

define('MESSAGE_OPCODE',38);
define('MES_OPCODE',77);

//================================================================= interpreters ========================================================
$interpreters = array(
    'TAPE' => array(
        'ES' => array(
            '42' => "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",
            '32' => ""
        ),
        'EN' => array(
            '42' => "",
            '32' => ""
        )
    ),
    'PLUS3' => array(
        'ES' => array(
            '42' => "",
            '32' => ""
        ),
        'EN' => array(
            '42' => "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",
            '32' => ""
        )
    )
);

function uncompressBytes($data)
{
    return gzuncompress(base64_decode($data));
}

//================================================================= filewrite ========================================================
function Error($msg)
{
 echo("Error: $msg.\n");
 exit(2);
}
//================================================================= filewrite ========================================================

$buffer = array(
    0 => array(),
    1 => array(),
    3 => array(),
    4 => array(),
    6 => array(),
    7 => array()
);

$bufferPTR = array(
    0 => 0,
    1 => 0,
    3 => 0,
    4 => 0,
    6 => 0,
    7 => 0
);

$currBuffer = 0;

// Writes a byte value to buffer
function writeByte($byte)
{
    global $buffer, $bufferPTR, $currBuffer;

    if ($byte > 0xff)
        Error("ERROR on write byte $byte.");
    else
    {
        $buffer[$currBuffer][$bufferPTR[$currBuffer]] = $byte;
        $bufferPTR[$currBuffer]++;
    }
}

// Moves pointer to end of buffer
function seekend()
{
    global $buffer, $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = sizeof($buffer[$currBuffer]);
}

// Moves pointer to specified offset in the buffer
function seek($offset)
{
    global $bufferPTR, $currBuffer;
    $bufferPTR[$currBuffer] = $offset;
}


// Gets the size of the buffer
function sizeBuffer()
{
    global $buffer, $currBuffer;
    return sizeof($buffer[$currBuffer]);
}


// Saves the buffer to a file
function flushBuffer($handle)
{
    global $buffer, $currBuffer;
    foreach ($buffer[$currBuffer] as $byte)
        fwrite($handle, chr($byte), 1);
}


// Writes a word value to buffer, will store as little endian or big endian depending on parameter
function writeWord($word, $bigEndian=false)
{
    $word = intval($word);
    $a = ($word & 0xff00) >> 8;
    $b = ($word & 0xff);
    if ($bigEndian)
    {
        $tmp = $b;
        $b = $a;
        $a = $tmp;
    }
    writeByte($b);
    writeByte($a);
}

// shortcut for writeByte(0)
function writeZero()
{
    $b =0;
    writeByte($b);
}

// shortcut for writeByte(0xFF)
function writeFF()
{
    $b =0xFF;
    writeByte($b);
}

// Writes $size bytes to file with value 0
function writeBlock($size)
{
    for ($i=0;$i<$size;$i++) writeZero();
}

//writes an array of bytes on the buffer
function appendBuffer($buff)
{
    foreach ($buff as $b) writeByte($b);
}

function string2intArr($string)
{
    $l = strlen($string);
    $r = array();
    for($i = 0; $i < $l; $i++)
    {
      $r[] = ord($string[$i]);
    }
    return $r;
}

function writeBytes($bytes)
{
    foreach($bytes as $byte) writeByte($byte);
    return sizeof($bytes);
}

function writeFile($fileName)
{
    $bytes = file_get_contents($fileName);
    if (!$bytes) return false;
    return writeBytes(string2intArr($bytes));
}

//================================================================= externs ========================================================

function generateExterns(&$adventure, &$currentAddress)
{
    global $currBuffer;


    foreach($adventure->externs as $extern)
    {
        $externData = $extern->FilePath;
        $parts = explode('|',$externData);
        if (sizeof($parts)<2) $parts[] ='EXTERN'; // this is just to be able to process old version .JSON files
        $filePath = $parts[0];
        $fileType = $parts[1];
        if (!file_exists($filePath)) Error("File not found: ${filePath}");
        $bytes = writeFile($filePath);
        if (!$bytes) Error("File not found: ${filePath}");
        switch ($fileType)
        {
            case 'EXTERN': $adventure->extvec[0] = $currentAddress; break;
            case 'SFX': $adventure->extvec[1] = $currentAddress; break;
            case 'INT':$adventure->extvec[2] = $currentAddress; break;
            default: Error("Invalid file type '$fileType' for file $filePath");
        }
        echo "$fileType $filePath loaded at " . prettyFormat($currentAddress) . "\n";
        $currentAddress+=filesize($filePath);
    }
}

//================================================================= tokens ========================================================


// Tokens array is data is a JSON object with hexedecimal representation of several strings:
$compressionJSON_ES  = '{"compression": "advanced", "tokens": ["00","2071756520","6120646520","6f20646520","20756e6120","2064656c20","7320646520","206465206c","20636f6e20","656e746520","20706f7220","2065737415","7469656e65","7320756e20","616e746520","2070617261","206c617320","656e747261","6e20656c20","6520646520","61206c6120","6572696f72","6369186e20","616e646f20","69656e7465","20656c20","206c6120","20646520","20636f6e","20656e20","6c6f7320","61646f20","20736520","65737461","20756e20","6c617320","656e7461","20646573","20616c20","61646120","617320","657320","6f7320","207920","61646f","746520","616461","6c6120","656e74","726573","717565","616e20","6f2070","726563","69646f","732c20","616e74","696e61","696461","6c6172","65726f","6d706c","6120","6f20","6572","6573","6f72","6172","616c","656e","6173","6f73","6520","616e","656c","6f6e","696e","6369","756e","2e20","636f","7265","6469","2c20","7572","7472","6465","7375","6162","6f6c","616d","7374","6375","7320","6163","696c","6772","6164","7465","7920","696d","746f","7565","7069","6775","6368","6361","6c61","6e20","726f","7269","6c6f","6d69","6c20","7469","6f62","6d65","7369","7065","206e","7475","6174","6669","646f","656d","6179","222e","6c6c"] }';
$compressionJSON_PT  = '{"compression": "advanced", "tokens": ["00", "737461766120", "207061726120", "0e110f6f20", "20756d6120", "646f20", "646120", "20646520", "696120", "206e6f20", "206120", "206f20", "2071756520", "206d7569746f20", "617320", "206c75676172", "696e686120", "616f20", "616e746520", "657374", "617220", "726120756d20", "206520", "6e6120", "2e20416f20", "20636f", "707265636973", "706172", "6f7320", "6f2e20", "656e686f20", "2e2e2e0d", "20202020202020", "73736f20", "736520", "656d20", "657373", "66617a657220", "706f72746120", "6f2e0d", "6d656e74", "72746f20", "726120", "6964616465", "676172", "6361727265", "696f20", "656e64657220", "646520", "726573", "2e2e2e20", "6c6f63616c20", "61766120", "6e7465", "6f2c20", "726f20", "612e0d", "6e747261", "756d6120", "636f6e", "657220", "616c6775", "756d20", "2e204f20", "696e68", "2073656d707265", "20706f72", "6d616973", "6d6520", "736f627265", "657261", "617265", "73756120", "696361", "2074656d706f20", "20616c", "646573", "656920", "732e20", "6f726d61", "6f6d6f20", "45737461", "5f2e0d", "747261", "6f732e", "0b2d203a207175", "66657272", "6465706f6973", "6f2065", "70616c", "616e64", "71756520", "756172", "6e68656369", "636f6d", "6f727265", "70617373", "74696e", "652c20", "2e2041", "697373", "0b2d20", "6120", "6f20", "6f75", "656c", "6572", "6520", "616c", "6f630e160f20", "6974", "6f72", "616e", "6172", "656e", "696e", "6f73", "6369", "616d20", "2e0d", "2e20", "6973", "2c20", "6573", "6f6e", "6361", "6972", "6176", "7175"]}';
$compressionJSON_EN  = '{"compression": "advanced", "tokens": ["00","2074686520","20796f7520","2061726520","696e6720","20746f20","20616e64","20697320","596f7520","616e6420","54686520","6e277420","206f6620","20796f75","696e67","656420","206120","206f70","697468","6f7574","656e74","20746f","20696e","616c6c","207468","206974","746572","617665","206265","766572","686572","616e64","656172","596f75","206f6e","656e20","6f7365","6e6f","6963","6170","2062","6768","2020","6164","6973","2063","6972","6179","7572","756e","6f6f","2064","6c6f","726f","6163","7365","7269","6c69","7469","6f6d","626c","636b","4920","6564","6565","2066","6861","7065","6520","7420","696e","7320","7468","2c20","6572","6420","6f6e","746f","616e","6172","656e","6f75","6f72","7374","2e20","6f77","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","646f","6f70","7368","6d65","6865","626f","6869","6361","706c","696c","636c","2061","6f66","2068","7474","6d6f","6b65","7665","736f","652e","642e","742e","7669","6c79","6964","7363","2070","656d","7220"] }';
$compressionJSON_DE  = '{"compression": "advanced", "tokens": ["00","2065696e6520","2064657220","2064696520","2064617320","2069737420","20766f6e20","2065696e20","20756e64","756e6420","44657220","44696520","44617320","20756e67","6c65696e","65727420","20647520","207a7520","2065696e","20766572","737420","6d6974","766f6e","68656e","617573","656e74","207a75","616c6c","206465","656e20","616265","697374","206265","766572","206475","447520","686572","756e64","696e67","736368","4475","6368","6965","6e6f","6963","6162","2062","6569","2020","6c6c","2063","6972","6572","7572","756e","2064","6c6f","726f","6172","7365","7269","6c69","7469","6f6d","7373","636b","4920","6564","6568","2066","6861","7065","6520","7420","696e","7320","6465","2c20","6572","6420","7a75","616e","6172","656e","6175","6f64","7374","2e20","686f","6c65","6174","616c","7265","7920","6368","616d","656c","2077","6173","6573","6974","2073","6c6c","6d61","6f70","6d65","6865","626f","6869","6b61","7565","6f65","6165","2061","2068","7474","6d6f","6b65","766f","736f","652e","642e","742e","7669","6d6d","7363","2070","656d"]}';
$compressionJSON_FR  = '{"compression": "advanced", "tokens": ["7f", "4a65206e6520", "706f72746520", "20646520", "4a6520", "782070617320", "666169726520", "746520", "2064616e7320", "205f2e0d", "4a27616920", "6e6520", "20706f757220", "6d61696e7465", "657220", "656e6c6576", "706575", "65722e0d", "61207269656e", "63656c612e", "0d51756520", "20706c65696e", "707579657a20", "20706173", "64166a0e100f", "652e0d", "6e616e74203f", "6c6520", "746f75636865", "73757220", "721665737361", "2e0d", "656e737569", "6c657a20", "6f7520", "65722e", "6d0e140f", "6e2761692072", "0d457420", "2074726f7020", "6c6965752e20", "496c206e2779", "6f6e74696e75", "657374", "7265", "6973717565", "6d6f69203a0d", "726f75", "6173736574", "6f737369", "69656e", "7320", "6669636869", "6572", "205f2e", "7572", "6f6d", "63656c61", "766f69", "73756973", "706f7274", "6e616e74", "0e160f74", "6169", "4c6520", "4020", "656374", "657a20", "452044", "7365", "617520", "0e140f", "6f6e", "202d20", "6575", "6f75", "6d70", "6574", "6170", "7061", "6e27", "616c", "6f69", "7573", "2e20", "7072", "2e2e", "6f72", "2064", "2063", "6369", "3a20", "6d65", "2056", "642e", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f", "7f"]}';

// A .TOK alternative file can be placed together with input JSON file (just use same name, .TOK extension. It's content should a JSON object just like the ones above)


function generateTokens(&$adventure, &$currentAddress, $hasTokens, $compressionData, &$savings)
{
    if (!$hasTokens)
    {
        writeZero();
        $currentAddress++;
    }
    else
    {
        $compressableTables = getCompressableTables($compressionData->compression,$adventure);

        // *** FIRST PASS: determine which tokens it's worth to use:

        // Copy all strings to an array
        $stringList = array();
        foreach ($compressableTables as $compressableTable)
            for ($i=0;$i<sizeof($compressableTable);$i++)
                $stringList[] =  $compressableTable[$i]->Text;

        // Determine savings per token
        $tokenSavings = array();
        for ($j=0;$j<sizeof($compressionData->tokens);$j++)
        {
            $token = $compressionData->tokens[$j];
            for ($i=0;$i<sizeof($stringList);$i++)
            {
                $parts = explode($token, $stringList[$i]);
                if (sizeof($parts)>1)
                 for ($k=0;$k<sizeof($parts)-1;$k++)  // Once per each token replacement (number of parts minus 1)
                 {
                    if (array_key_exists($j, $tokenSavings)) $tokenSavings[$j] += strlen($token) - 1; else $tokenSavings["$j"] = -1; // First replacement of a token wastes 1 byte, next replacements save token length minus 1
                 }
                 $stringList[$i] = implode(chr($j+127), $parts);
            }
        }

        // Remove tokens which aren't worth to use
        $totalSaving = 0;
        $finalTokens = array($compressionData->tokens[0]); //never remove first token
        for ($j=1;$j<sizeof($compressionData->tokens);$j++) // $j=1 to start by second token
        {
            if (!array_key_exists($j, $tokenSavings)) $tokenSavings[$j] = 0;
            if ($tokenSavings[$j]>0)
            {
                $finalTokens[] = $compressionData->tokens[$j];
                $totalSaving += $tokenSavings[$j];
            }
            else if ($adventure->verbose)
            {
                if ($tokenSavings[$j]==0) echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause it was not used by any text.\n";
                                     else echo "Warning: token [" . $compressionData->tokens[$j] . "] won't be used cause using it wont save any bytes, but waste ".abs($tokenSavings[$j])." byte.\n";
            }
        }
        $savings = $totalSaving;

        // *** SECOND PASS: replace and dump only remaingin tokens

        if ($adventure->verbose) echo "Compression tokens used: " . sizeof($finalTokens) . ".\n";
        if ($adventure->classicMode)
        {
            while (sizeof($finalTokens)<128) $finalTokens[] = ' ';
            if ($adventure->verbose) echo "Filling tokens table up to 128 tokens for classic mode compatibility.\n";
        }


        // Replace tokens
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $token = $finalTokens[$j];
            foreach ($compressableTables as $compressableTable)
                for ($i=0;$i<sizeof($compressableTable);$i++)
                {
                    $message = $compressableTable[$i]->Text;
                    $parts = explode($token, $message);
                    $newMessage = implode(chr($j+127), $parts);
                    $compressableTable[$i]->Text = $newMessage;;
                }
        }

        // Dump tokens to file
        for ($j=0;$j<sizeof($finalTokens);$j++)
        {
            $tokenStr = $finalTokens[$j];
            $tokenLength = strlen($tokenStr);
            for ($i=0;$i<$tokenLength;$i++)
            {
                $shift = ($i == $tokenLength-1) ? 128 : 0;
                $c = substr($tokenStr, $i, 1);
                writeByte(ord($c) + $shift);
                $currentAddress++;
            }
        }


    }
}
//================================================================= common ========================================================

define ('OFUSCATE_VALUE', 0xFF);

class daadToChr
{
var $conversions = array('ª', '¡', '¿', '«', '»', 'á', 'é', 'í', 'ó', 'ú', 'ñ', 'Ñ', 'ç', 'Ç', 'ü', 'Ü');
var $newConversions = array(16=>'à',17=>'ã',18=>'ä',19=>'â',20=>'è',21=>'ë',22=>'ê',23=>'ì',24=>'ï',25=>'î',26=>'ò',27=>'õ',28=>'ö',29=>'ô',30=>'ù',31=>'û',35=>'ß');

}

function summary($adventure)
{
    echo "\n";
    echo "Adventure Totals\n";
    echo "================\n";
    echo "Locations   : " . sizeof($adventure->locations) . "\n";
    echo "Objects     : " . sizeof($adventure->objects) . "\n";
    echo "Messages    : " . sizeof($adventure->messages) . "\n";
    echo "Sysmess     : " . sizeof($adventure->sysmess) . "\n";
    if (sizeof($adventure->xmessages)) echo "XMessages   : " . sizeof($adventure->xmessages) . "\n";
    echo "Connections : " . sizeof($adventure->connections) . "\n";
    echo "Processes   : " . sizeof($adventure->processes) . "\n";
    echo "\n";

}

function prettyFormat($value)
{
    $value = strtoupper(dechex($value));
    $value = str_pad($value,4,"0",STR_PAD_LEFT);
    $value = "0x$value";
    return $value;
}

function replace_extension($filename, $new_extension) {
    $info = pathinfo($filename);
    return ($info['dirname'] ? $info['dirname'] . DIRECTORY_SEPARATOR : '')
        . $info['filename']
        . '.'
        . $new_extension;
}

function addPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        writeZero(); // Fill with one byte for padding
        $currentAddress++;
    }
}

function checkPaddingIfRequired(&$currentAddress)
{
    if ((($GLOBALS['adventure']->forcedPadding)) && (($currentAddress % 2)==1))
    {
        $currentAddress++;
    }
}



function hex2str($hex)
{
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));

    return $string;
}


function getCompressableTables($compression, &$adventure)
{
    $compressableTables = array();
    switch ($compression)
    {
     case 'basic': $compressableTables = array($adventure->locations); break;
     case 'advanced':  $compressableTables = array($adventure->locations, $adventure->messages, $adventure->sysmess, $adventure->xmessages); break;
    }
    return $compressableTables;
}




//================================================================= messages  ========================================================


function replaceChars($str)
{
    // replace special Spanish and other languages characters
    $daad_to_chr = new daadToChr();
    // Old standard Spanish characters
    for($i=0;$i<sizeof($daad_to_chr->conversions);$i++)
    {
        $spanishChar = $daad_to_chr->conversions[$i];
        if (strpos($str, $spanishChar)!==false)
        {
            $to = chr($i+16);
            $str = str_replace($spanishChar, $to, $str);
        }
    }

    // New supported characters
    foreach($daad_to_chr->newConversions as $i=>$nonEnglishChar)
    {
        if (strpos($str, $nonEnglishChar)!==false)
        {
            $to = '#g'. chr($i) . '#t';
            $str = str_replace($nonEnglishChar, $to, $str);
        }
    }
    // replace escape sequences
    $replacements = array('#g'=>0x0e, '#t'=>0x0f,'#b'=>0x0b, '#s'=>0x20, '#f'=>0x7f, '#k'=>0x0c, '#n'=>0x0D, '#r'=>0x0D);
    // Add #A to #P to replacements array
    for ($i=ord('A');$i<=ord('P');$i++) $replacements["#" . chr($i)]= $i + 0x10 - ord('A');

    $oldSequenceWarning = false;
    foreach ($replacements as $search=>$replace)
    {
        // Check the string does not contain old escape sequences using baskslash, print warning otherwise
        if ($search!='#n')
        {
            $oldSequence = str_replace('#','\\', $search);
            if ((strpos($str, $oldSequence)!==false) && (!$oldSequenceWarning))
            {
                echo "Warning: DRC does not support escape sequences with backslash character, use sharp (#) instead. i.e: #g instead of \g";
                $oldSequenceWarning = true;
            }
        }
        $str = str_replace($search, chr($replace), $str);
    }

    // Replace carriage retuns that may come by users writing \n and that going throuhg as chr(10) instead of '\n' string
    $str = str_replace(chr(10), chr(13),$str);
    // this line must be last, to properly print # character
    $str = str_replace('##', "#",$str);
    return $str;
}

function replaceEscapeChars(&$adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects, $adventure->xmessages);
    foreach ($tables as $table)
     foreach($table as $message)
     {
        $message->originalText = $message->Text;
        // Although the following line is no longer needed, as DRF already generates the strings with all escape chars and special chars replaced
        // I'm keeping this code here so old JSON created with old DRF work.
        $message->Text = replaceChars($message->Text);
     }
}

function checkStrings($adventure)
{
    $tables = array($adventure->messages, $adventure->sysmess, $adventure->locations, $adventure->objects);
    $tableNames = array('user messages (MXT)','system messages(STX)','location texts(LTX)','object texts(OTX)');
    $messageNames = array('message','message','location','object');
    for ($tableID=0;$tableID<4;$tableID++)
    {
        $table = $tables[$tableID];
        for ($msgID=0;$msgID<sizeof($table);$msgID++)
        {
            $message = $table[$msgID];
            $text = $message->Text;
            for ($i=0;$i<strlen($text);$i++)
            {
                if (ord($text[$i])>127)
                {
                    $tableName = $tableNames[$tableID];
                    $messageName = $messageNames[$tableID];
                    $originalMessage = $message->originalText;
                    Error("Invalid character in $tableName, $messageName #$msgID (".($i+1).",#".ord($text[$i])."): '$originalMessage'");
                }
            }
        }
    }

}


function generateXMessages($adventure)
{
    $currentOffset = 0;
    $currentFile = 0;
    $maxFileSize = 16;

    $i = 64 / $maxFileSize;
    $xmBuffer = array_fill(0, $i, array());
    $xmBufferPTR = array_fill(0, $i, 0);

    $GLOBALS['maxFileSizeForXMessages'] = $maxFileSize;
    $maxFileSize *= 1024; // Convert K to byte

    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $message = $adventure->xmessages[$i];
        $messageLength = strlen($message->Text);
        if ($messageLength + $currentOffset + 1  > $maxFileSize) // Won't fit, next File  , +1  for the end of message mark
        {
            $currentFile++;
            $currentOffset = 0;
        }
        $GLOBALS['xMessageOffsets'][$i] = $currentOffset + $currentFile * $maxFileSize;
        // Saving length as a truncated value to make it fit in one byte, the printing routine will have to recover the missing bit by filling with 1. That will provide
        // a length which could be maximum 1 bytes longer than real, what is not really important cause the end of message mark will avoid that extra char being printed
        for ($j=0;$j<$messageLength;$j++)
        {
            $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord($message->Text[$j]) ^ OFUSCATE_VALUE);
            $xmBufferPTR[$currentFile]++;
            $currentOffset++;
        }
        $xmBuffer[$currentFile][$xmBufferPTR[$currentFile]] = (ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $xmBufferPTR[$currentFile]++;
        $currentOffset++;
    }

    return $xmBuffer;
}

function generateMessages($messageList, &$currentAddress)
{

    $messageOffsets = array();
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        addPaddingIfRequired($currentAddress);
        $messageOffsets[$messageID] = $currentAddress;
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
            writeByte(ord($message->Text[$i]) ^ OFUSCATE_VALUE);
            $currentAddress++;
        }
        writeByte(ord("\n") ^ OFUSCATE_VALUE ); //mark of end of string
        $currentAddress++;

    }
    // Write the messages table
    addPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        writeWord($messageOffsets[$messageID] , $GLOBALS['isBigEndian']);
        $currentAddress += 2;
    }

}

function calculateSizeMessages($messageList)
{

    $currentAddress = 0;
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        checkPaddingIfRequired($currentAddress);
        $message = $messageList[$messageID];
        for ($i=0;$i<strlen($message->Text);$i++)
        {
             $currentAddress++;
        }
        $currentAddress++;
    }
    // Write the messages table
    checkPaddingIfRequired($currentAddress);
    for ($messageID=0;$messageID<sizeof($messageList);$messageID++)
    {
        $currentAddress += 2;
    }

    return $currentAddress;
}


function generateMTX($adventure, &$currentAddress)
{
    generateMessages($adventure->messages, $currentAddress);
}

function generateSTX($adventure, &$currentAddress)
{
    generateMessages($adventure->sysmess, $currentAddress);
}

function generateLTX($adventure, &$currentAddress)
{
    generateMessages($adventure->locations, $currentAddress);
}

function generateOTX($adventure, &$currentAddress)
{
    generateMessages($adventure->objects, $currentAddress);
}


function getSizeMTX($adventure)
{
    return calculateSizeMessages($adventure->messages);
}

function getSizeSTX($adventure)
{
    return calculateSizeMessages($adventure->sysmess);
}

function getSizeLTX($adventure)
{
    return calculateSizeMessages($adventure->locations);
}

function getSizeOTX($adventure)
{
    return calculateSizeMessages($adventure->objects);
}

//================================================================= connections ========================================================


function generateConnections($adventure, &$currentAddress)
{

    $connectionsTable = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++) $connectionsTable[$locID] = array();
    foreach($adventure->connections as $connection)
    {
        $FromLoc = $connection->FromLoc;
        $ToLoc = $connection->ToLoc;
        $Direction = $connection->Direction;
        $connectionsTable[$FromLoc][]=array($Direction,$ToLoc);
    }


    // Write the connections
    $connectionsOffset = array();
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        addPaddingIfRequired($currentAddress);
        $connectionsOffset[$locID] = $currentAddress;
        $connections = $connectionsTable[$locID];
        foreach ($connections as $connection)
        {
            writeByte($connection[0]);
            writeByte($connection[1]);
            $currentAddress +=2;
        }
        writeFF(); //mark of end of connections
        $currentAddress++;
    }

    // Write the Lookup table
    addPaddingIfRequired($currentAddress);
    for ($locID=0;$locID<sizeof($adventure->locations);$locID++)
    {
        writeWord($connectionsOffset[$locID], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }

}

//================================================================= vocabulary ========================================================




function generateVocabulary($adventure, &$currentAddress)
{

    $daad_to_chr = new daadToChr();
    foreach ($adventure->vocabulary as $word)
    {
        // Clean the string from unexpected, unwanted, UFT-8 characters which are valid for vocabulary. Convert them to ISO-8859-1
        $tempWord = $word->VocWord;
        $finalVocWord = '' ;
        $daad_to_chr = new daadToChr();
        for ($i = 0;$i<strlen($tempWord);$i++)
        {
            if (in_array($tempWord[$i], $daad_to_chr->conversions))
            {
                $tempWord[$i] = chr(16+array_search($tempWord[$i],$daad_to_chr->conversions));
            }
            else if (ord($tempWord[$i])<128) $finalVocWord.=$tempWord[$i];
            else if (ord($tempWord[$i])==195)  // Look for UTF encoded characters
            {
                $i++;
                switch (ord($tempWord[$i]))
                {
                    case 161 : $finalVocWord.= chr(21); break; //á
                    case 169 : $finalVocWord.= chr(22); break; //é
                    case 173 : $finalVocWord.= chr(23); break; //í
                    case 179 : $finalVocWord.= chr(24); break; //ó
                    case 186 : $finalVocWord.= chr(25); break; //ú
                    case 129 : $finalVocWord.= chr(21); break; //Ý
                    case 137 : $finalVocWord.= chr(22); break; //Ë
                    case 141 : $finalVocWord.= chr(23); break; //Ý
                    case 147 : $finalVocWord.= chr(24); break; //Ó
                    case 154 : $finalVocWord.= chr(25); break; //ú

                    case 145 : $finalVocWord.= chr(27); break; //Ñ
                    case 177 : $finalVocWord.= chr(27); break; //ñ

                    case 156 : $finalVocWord.= chr(31); break; //Ü
                    case 188 : $finalVocWord.= chr(31); break; //ü

                    case 135 : $finalVocWord.= chr(29); break; //Ç
                    case 167 : $finalVocWord.= chr(29); break; //ç

                    default: echo "Warning: Found invalid 195-" . ord($tempWord[$i]) . " UTF encoded string in $tempWord.\n";
                }
            } else
            if (ord($tempWord[$i])>128) $finalVocWord.=$tempWord[$i];
        }
        // Now let's save it
        $vocWord = substr(str_pad($finalVocWord,5),0,5);
        for ($i=0;$i<5;$i++)
        {
            $character =$vocWord[$i];
            if ((ord($character)>=32) && (ord($character)<128)) $character = strtoupper($character);
            $character = ord($character) ^ OFUSCATE_VALUE;
            writeByte( $character);
        }
        writeByte($word->Value);
        writeByte($word->VocType);
        $currentAddress+=7;
    }
    writeZero(); // store 0 to mark end of vocabulary
    $currentAddress++;
}
//================================================================= objects ========================================================
function generateObjectNames($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        writeByte($object->Noun);
        writeByte($object->Adjective);
        $currentAddress+=2;
    }
}

function generateObjectInitially($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeByte($object->InitialyAt);
     $currentAddress++;
    }
    writeFF();
    $currentAddress++;
}

function generateObjectWeightAndAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
        $b = $object->Weight & 0x3F;
        if ($object->Container)
        {
            $b = $b | 0x40;
            $locno = $object->Value;
            $text = $adventure->objects[$locno]->Text;
            if ($adventure->locations[$locno]->Text != '') echo "Warning: object #$locno ($text) is a container. You are supposed to reserve location #$locno to hold the objects in the container, but location #$locno has a description.\n";
        }
        if ($object->Wearable) $b = $b | 0x80;
        writeByte($b);
        $currentAddress++;
    }
}

function generateObjectExtraAttr($adventure, &$currentAddress)
{
    foreach($adventure->object_data as $object)
    {
     writeWord($object->Flags, $GLOBALS['isBigEndian']);
     $currentAddress+=2;
    }

}
//================================================================= processes ========================================================


function getCondactsHash($adventure, $condacts, $from)
{
    $hash = '';
    for ($i=$from; $i<sizeof($condacts);$i++)
    {
        $condact = $condacts[$i];
        $opcode = $condact->Opcode;
        if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue;
        if (($opcode==FAKE_USERPTR_CONDACT_CODE)) continue;
        if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
        $hash .= "$condact->Opcode ";
        if ($condact->NumParams>0)
        {
            $param1 = $condact->Param1;
            $hash .= "$param1 ";
            if ($condact->NumParams>1)
            {
                $param2 = $condact->Param2;
                $hash .= "$param2 ";
                if ($condact->NumParams>2)
                {
                    $param3 = $condact->Param3;
                    $hash .= "$param3 ";
                    if ($condact->NumParams>3)
                    {
                        $param4 = $condact->Param4;
                        $hash .= "$param4 ";
                    }
                }
            }
        }
    }
    return $hash;
}

function generateProcesses($adventure, &$currentAddress, $subtarget)
{
    global $bufferPTR;
    //PASS ZERO, CHECK THE PROCESSES AND REPLACE SOME CONDACTS LIKE XMESSAGE WITH PROPER EXTERN CALLS. MAKE SURE MALUVA IS INCLUDED
    //           ALSO FIX SOME BUGS LIKE ZX BEEP CONDACT WRONG ORDER
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if ($condact->Opcode == PROCESS_OPCODE)
                {
                    // Check if process called does exist, in case it's not indirect call
                    if (!$condact->Indirection1)
                     if ($condact->Param1 >= sizeof($adventure->processes)) Error('Invalid call to process #'.$condact->Param1.". Specified process does not exist");
                }
                else if (($condact->Opcode & 256) == 256) // Jump Maluva Condacts
                {
                    // rearrange the parameters so it's  1-<fixed opcode> 2-<8> 3-<pre-offset> 4-<0> 5-<p1> 6-[p2]
                    // For the time being, we are not filling the offset with real offset in DDB, we keep the "number of condact in the entry" value
                    // of param3 (pre-offset) and we keep a gap for later keep the offset in an LSB/MSB pair in p3/p4
                     if ($condact->NumParams == 2)
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param2; // The pre-offset in p3
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The condact parameter

                        $condact->NumParams = 5;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                    }
                    else
                    {
                        $p1 = $condact->Opcode & 0xFF;
                        $p3 = $condact->Param3; // The pre-offset in pe
                        $p4 = 0;                // Gap for future real offset
                        $p5 = $condact->Param1; // The first condact parameter
                        $p6 = $condact->Param2; // The second condact parameter
                        $condact->NumParams = 6;
                        $condact->Param1 = $p1;
                        $condact->Param3 = $p3;
                        $condact->Param4 = $p4;
                        $condact->Param5 = $p5;
                        $condact->Param6 = $p6;
                    }
                    $condact->Param2 = 8; // Maluva function for jumps
                    $condact->Opcode = EXTERN_OPCODE;
                }
                else if  ($condact->Opcode == XMES_OPCODE)  // Convert XMESS in a Maluva CALL, XMESSAGE does not actually get to drb, as drf already converts all XMESSAGE into XMESS with a \n added to the string
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $messno = $condact->Param1;
                    $offset = $GLOBALS['xMessageOffsets'][$messno];
                    if ($offset>0xFFFF) Error('Size of xMessages exceeds the 64K limit');
                    $condact->NumParams = 3;
                    $condact->Param2 = 3; // Maluva's function 3
                    $condact->Param1 = $offset & 0xFF; // Offset LSB
                    $condact->Param3 = ($offset & 0xFF00) >> 8; // Offset MSB
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPICTURE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams = 2;
                    $condact->Param2 = 0; // Maluva function 0
                    $condact->Condact = 'EXTERN';
                    // This is not necessary for 128, keep commented for reference
                    /*
                    if ($subtarget=='TAPE')  // If target does not support XPICTURE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                    */
                }
                else if ($condact->Opcode == XUNDONE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 7; // Maluva function 7
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XNEXTCLS_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 8; // Maluva function 8
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget!='NEXT')  // If target does not support XNEXTCLS_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XNEXTRST_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param1 = 0; // Useless but it must be set
                    $condact->Param2 = 9; // Maluva function 9
                    $condact->Indirection1 = 0; // Also useless, but it must be set
                    $condact->Condact = 'EXTERN';
                    if ($subtarget !='NEXT')  // If target does not support XNEXTRST_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSPEED_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 10; // Maluva function 10
                    $condact->Condact = 'EXTERN';
                    if (($subtarget!='NEXT') && ($subtarget!='UNO'))  // If target does not support XSPEED_OPCODE replace by always true condition "AT @38"
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
                else if ($condact->Opcode == XSAVE_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 1; // Maluva function 1
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XLOAD_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 2; // Maluva function 2
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XPART_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 4; // Maluva function 4
                    $condact->Condact = 'EXTERN';
                }
                else if ($condact->Opcode == XBEEP_OPCODE)
                {
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    {
                        $condact->Opcode = EXTERN_OPCODE;
                        $condact->NumParams=3;
                        $condact->Param3 = $condact->Param2;
                        $condact->Param2 = 5; // Maluva function 5
                        $condact->Condact = 'EXTERN'; // XBEEP A B  ==> EXTERN A 5 B  (3 parameters)
                    }
                }
                else if ($condact->Opcode == BEEP_OPCODE)
                {

                    // Out of range values, replace BEEP with PAUSE
                    if (($condact->Param2<48) || ($condact->Param2>238))
                    {
                        $condact->Opcode = PAUSE_OPCODE;
                        $condact->Condact = 'PAUSE';
                        $condact->NumParams = 1;
                    }
                    else
                    // Zx Spectrum interpreter expects BEEP parameters in opposite order
                    {
                        $tmp = $condact->Param1;
                        $condact->Param1 = $condact->Param2;
                        $condact->Param2 = $tmp;
                    }
                }
                else if ($condact->Opcode == XPLAY_OPCODE)
                {
                    // Default values
                    $values = array(XPLAY_OCTAVE => 4, XPLAY_VOLUME => 8, XPLAY_LENGTH =>4, XPLAY_TEMPO => 120);
                    $xplay = array();
                    $mml = strtoupper($adventure->other_strings[$condact->Param1]->Text);

                    while ($mml) {
                        $next = strpbrk(substr($mml, 1), "ABCDEFGABLNORTVSM<>&");
                        if ($next!==false)
                            $note = substr($mml, 0, strlen($mml)-strlen($next));
                        else
                            $note = $mml;
                        $beep = mmlToBeep($note, $values, $subtarget);
                        if ($beep!==NULL) $xplay[] = $beep;
                        $mml = $next;
                    }
                    if (sizeof($xplay))
                    {
                        array_splice($entry->condacts, $condactID, 1, $xplay);
                        $condactID --; // As the current condact has been replaced with a sequentia of BEEPs, we move the pointer one step back to make sure the changes made for BEEP in ZX Spectrum applies
                    }
                }
                else if ($condact->Opcode == XDATA_OPCODE)
                {
                    $lets = array();
                    $dataString = strtoupper($adventure->other_strings[$condact->Param1]->Text);
                    $dataArray = explode(',', $dataString);

                    if (sizeof($dataArray)<2) Error('There is not data enough in XDATA condact');               

                    foreach ($dataArray as $i=>$element)
                    {
                        $element = trim($dataArray[$i]);
                        $var = filter_var($element, FILTER_VALIDATE_INT, array());
                        if (!$var) Error("Non integer value in XDATA condact element #$i '$element'");
                        if (($element < 0) || ($element > 255)) Error("XDATA values must be in the 0-255 range, element #$i is not ($element)");
                    }

                    $baseFlagno = $dataArray[0];
                    for ($i=1;$i<sizeof($dataArray);$i++)
                    {
                        if ($baseFlagno>255) Error('XDATA condact went over flag 255');
                        $element = trim($dataArray[$i]);
                        $let = dataToLet($baseFlagno, $element);
                        $lets[]= $let;
                        $baseFlagno++;
                    }

                    if (sizeof($lets)) 
                    {
                        array_splice($entry->condacts, $condactID, 1, $lets);
                        $condactID --; // As the current condact has been replaced with a sequentia of LETs, we move the pointer one step back 
                    }
                }
                else if ($condact->Opcode == XSPLITSCR_OPCODE)
                {
                    $condact->Opcode = EXTERN_OPCODE;
                    $condact->NumParams=2;
                    $condact->Param2 = 6; // Maluva function 6. Notice in case this condact is generated for a machine not supporting split screen it will just do nothing
                    $condact->Condact = 'EXTERN'; // XSPLITSCR X  ==> EXTERN X 6
                    if  ($subtarget!='UNO')  // If target does not support XSPLITSCR, replaces condact with "AT @38" (always true)
                    {
                        $condact->Opcode = AT_OPCODE;
                        $condact->Condact = 'AT';
                        $condact->Indirection1 = 1;
                        $condact->Param1 = 38;
                        $condact->NumPrams=1;
                    }
                }
            }
        }
    }


    $terminatorOpcodes = array(22, 23,103, 116,117,108);  //DONE/OK/NOTDONE/SKIP/RESTART/REDO
    $condactsOffsets = array();
    // PASS ONE, GENERATE HASHES UNLESS CLASSICMODE IS ON OR ENTRY HAS JUMPS
    $condactsHash = array();
    if (!$adventure->classicMode)
    {
        for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
        {
            $process = $adventure->processes[$procID];
            for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
            {
                $entry = $process->entries[$entryID];
                for($condactID=0;$condactID<sizeof($entry->condacts); $condactID++)
                {
                    $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                    if (($hash!='') && (!array_key_exists("$hash", $condactsHash)))
                    {
                        $hashInfo = new StdClass();
                        $hashInfo->offset = -1; // Not yet calculated
                        $hashInfo->details = new StdClass();
                        $hashInfo->details->process = $procID;
                        $hashInfo->details->entry = $entryID;
                        $hashInfo->details->condact = $condactID;
                        $condactsHash["$hash"] = $hashInfo;
                    }
                }
            }
        }
    }

    // Dump  all condacts and store which address each entry condacts
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            // Check entry condacts hashes (unless classicMode is on)
            $entry = $process->entries[$entryID];
            if (!$adventure->classicMode)
            {
                $hash = getCondactsHash($adventure,$entry->condacts, 0);
                if ($hash!='')
                {
                    if ($condactsHash["$hash"]->offset != -1)
                    {
                        $offset = $condactsHash["$hash"]->offset;
                        $condactsOffsets["${procID}_${entryID}"] = $offset;
                        continue; // Avoid generating this entry condacts, as there is one which can be re-used
                    }
                    else
                    {
                        addPaddingIfRequired($currentAddress);
                        $condactsHash["$hash"]->offset = $currentAddress;
                    }
                }
            } else addPaddingIfRequired($currentAddress);

            $condactsOffsets["${procID}_${entryID}"] = $currentAddress;
            $entry = $process->entries[$entryID];
            $terminatorFound = false;
            $eachCondactOffsets = array(); // This will keep the offeset of each condact like [0]->0x8383, [1]->0x8385, etc.
            $forwardCondactOffsets = array(); // For forward references, this will keep gaps to fill: [0x8452]->1. When the entry is finished we seek back in the
                                            // file and fill the gaps so gap  0x8452 is filled wit 0x8385 in the above sample
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $eachCondactOffsets[$condactID] = $currentAddress;

                $condact = $entry->condacts[$condactID];

                $opcode = $condact->Opcode;
                if (($opcode == EXTERN_OPCODE) && ($condact->Param2 == 8)) // Jumps
                {
                    $condactNum = $condact->Param3;
                    if ($condactNum<=$condactID)  // Its a back jump
                    {
                        $condact->Param3 = $eachCondactOffsets[$condactNum] & 0xFF;
                        $condact->Param4 = ($eachCondactOffsets[$condactNum] >> 8) & 0xFF;
                    }
                    else // It's forward jump
                    {
                        $forwardCondactOffsets[$bufferPTR + 3] = $condactNum; // Note down that in $bufferPTR+3 we have to replace the value with th offset of condact $condactNUM
                    }
                }
                if (($opcode==FAKE_DEBUG_CONDACT_CODE) && (!$adventure->debugMode)) continue; // Not saving fake DEBUG condact if debug mode is not on.
                if ($opcode==FAKE_USERPTR_CONDACT_CODE)
                {
                    $usrextvec = $condact->Param1;
                    $adventure->extvec[$usrextvec] = $currentAddress;
                    echo "UserPtr #$usrextvec set to " . prettyFormat($currentAddress).  "\n";
                    continue; // Just save the extvec, do not save the fake condact
                }

                if ((!$adventure->classicMode))
                    //if (($currentAddress%2 == 0) || (!isPaddingPlatform($target))) // We can only partially re-use an entry if its word aligned or the platform does not require word alignment
                    //{
                        $hash = getCondactsHash($adventure,$entry->condacts, $condactID);
                        if ($hash!='')
                            if ($condactsHash["$hash"]->offset == -1) $condactsHash["$hash"]->offset = $currentAddress;
                    //}

                if (($condact->NumParams>0) && ($condact->Indirection1)) $opcode = $opcode | 0x80; // Set indirection bit
                if (($opcode == FAKE_DEBUG_CONDACT_CODE) && ($adventure->verbose)) echo "Debug condact found, inserted.\n";
                writeByte($opcode);
                $currentAddress++;
                for($i=0;$i<$condact->NumParams;$i++)
                {
                    switch ($i)
                    {
                        case 0: $param = $condact->Param1;
                                writeByte($param);
                                break;

                        case 1: $param = $condact->Param2;
                                writeByte($param);
                                break;

                        case 2: $param = $condact->Param3;
                                writeByte($param);
                                break;
                        case 3: $param = $condact->Param4;
                                writeByte($param);
                                break;
                        case 4: $param = $condact->Param5;
                                writeByte($param);
                                break;
                        case 5: $param = $condact->Param6;
                                writeByte($param);
                                break;
                    }
                }
                $currentAddress+= $condact->NumParams;
                if ((!$adventure->classicMode) && (in_array($opcode, $terminatorOpcodes)))
                {
                    $terminatorFound = true;
                    if ($adventure->verbose)
                    {
                        if ($condactID != sizeof($entry->condacts) -1 ) // Terminator found, but additional condacts exists in the entry
                        {
                            $humanEntryID =$entryID + 1; // entryID increased so for human readability entries are from #1 to #n, not from #0 to #n
                            $verb = $entry->Verb;
                            $noun = $entry->Noun;
                            $condactName = $entry->condacts[$condactID+1]->Condact;
                            $terminatorName = $entry->condacts[$condactID]->Condact;
                            $entryText = $entry->Entry;
                            $dumped = ($adventure->classicMode) ? "has been" : "hasn't been";
                            echo "Warning: Condact '$condactName' found after a terminator '$terminatorName' in entry #$humanEntryID ($entryText) at process #$procID . Condact $dumped dumped to DDB file.\n";
                        }
                    }
                    break; // If a terminator condact found, no more condacts in the entry will be ever executed, so we break the loop (normally there won't be more condacts anyway)
                }
            }
            if  (($adventure->classicMode) || (!$terminatorFound)) // If no terminator condact found, ad termination fake condact 0xFF
            {
                writeFF(); // mark of end of entry
                $currentAddress++;
            }
            // Fix the forward jump references
            $preserverAddr = $currentAddress;
            foreach ($forwardCondactOffsets as $address=>$condactNumber)
            {
                seek($address);
                $patch = intval($eachCondactOffsets[$condactNumber]);
                writeWord($patch, $GLOBALS['isBigEndian']);
            }
            // move again to the end
            seekend();
        }
    }

    addPaddingIfRequired($currentAddress);
    // Dump the entries tables
    $processesOffsets = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        $processesOffsets["$procID"] = $currentAddress;
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            writeByte($entry->Verb);
            writeByte($entry->Noun);
            writeWord($condactsOffsets["${procID}_${entryID}"] , $GLOBALS['isBigEndian']);
            $currentAddress += 4;
        }
        WriteZero(); // Marca de fin de proceso, doble 00
        $currentAddress++;
        addPaddingIfRequired($currentAddress);
    }

    // Dump the processes table
    addPaddingIfRequired($currentAddress);
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        writeWord($processesOffsets["$procID"], $GLOBALS['isBigEndian']);
        $currentAddress+=2;
    }
}

//================================================================= other ========================================================
function prependPlus3HeaderToDDB($outputFileName, $startAddress)
{

    $fileSize = filesize($outputFileName) + 128; // Final file size wit header
    $inputHandle = fopen($outputFileName, 'r');
    $outputHandle = fopen("prepend.tmp", "w");

    $header = array();
    $header[]= ord('P');
    $header[]= ord('L');
    $header[]= ord('U');
    $header[]= ord('S');
    $header[]= ord('3');
    $header[]= ord('D');
    $header[]= ord('O');
    $header[]= ord('S');
    $header[]= 0x1A; // Soft EOF
    $header[]= 0x01; // Issue
    $header[]= 0x00; // Version
    $header[]= $fileSize & 0XFF;  // Four bytes for file size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= ($fileSize & 0xFF0000) >> 16;
    $header[]= ($fileSize & 0xFF000000) >> 24;
    $header[]= 0x03; // Bytes:
    $fileSize -= 128; // Get original size
    $header[]= $fileSize & 0x00FF;  // Two bytes for data size
    $header[]= ($fileSize & 0xFF00) >> 8;
    $header[]= $startAddress & 0x00FF;  // Two Bytes for load addres
    $header[]= ($startAddress & 0xFF00) >> 8;
    while (sizeof($header)<127) $header[]= 0; // Fillers
    $checksum = 0;
    for ($i=0;$i<127;$i++)  $checksum+=$header[$i];
    $header[]= $checksum & 0xFF; // Checksum

    // Dump header
    for ($i=0;$i<128;$i++) fputs($outputHandle, chr($header[$i]), 1);

    // Dump original DDB
    while (!feof($inputHandle))
    {
        $c = fgetc($inputHandle);
        fputs($outputHandle,$c,1);
    }
    fclose($inputHandle);
    fclose($outputHandle);
    unlink($outputFileName);
    rename("prepend.tmp" ,$outputFileName);
}

function dataToLet($flagno, $value)
{
    $condact = new stdClass();
    $condact->NumParams = 2;
    $condact->Indirection1 = 0;
    $condact->Param1 = $flagno;
    $condact->Param2 = $value;
    $condact->Condact ='LET';
    $condact->Opcode = LET_OPCODE;
    return $condact;
}

//This function will move messages from MTX to XMESSAGES it they overflow the size of the Spectrum bank
function moveMessagesToXmessages($adventure)
{
    // Skip this step if size of MTX is less than 16 Kb
    if (getSizeMTX($adventure) <= 16*1024) return $adventure;

    // Find maximum xMessage index
    $xMessNextId = -1;
    for($i=0;$i<sizeof($adventure->xmessages);$i++)
    {
        $xmsg = $adventure->xmessages[$i];
        if ($xmsg->Value > $xMessNextId) $xMessNextId = $xmsg->Value;
    }
    $xMessNextId += 1;

    // Extract messages until MTX is less than 16Kb
    $messagesToTransfer = array();
    while (getSizeMTX($adventure) > 16*1024)   //Do this until MTX is less than bank size.
    {
        $msg = array_pop($adventure->messages);
        $id = $msg->Value;
        $messagesToTransfer[$id] = $msg;
    }

    // Search for condacts with the extracted messages and rewrite transfered Messages as xMessages
    $messageToXMes = array();
    $mesToXMes = array();
    for ($procID=0;$procID<sizeof($adventure->processes);$procID++)
    {
        $process = $adventure->processes[$procID];
        for ($entryID=0;$entryID<sizeof($process->entries);$entryID++)
        {
            $entry = $process->entries[$entryID];
            for($condactID=0;$condactID<sizeof($entry->condacts);$condactID++)
            {
                $condact = $entry->condacts[$condactID];
                if (($condact->Opcode == MES_OPCODE) && ($condact->Indirection1 == 0) && 
                    array_key_exists($condact->Param1, $messagesToTransfer))
                {
                    $msgId = $condact->Param1;
                    if (array_key_exists($msgId, $mesToXMes))
                    {
                        //We already have this message transferred.
                        $xMessId = $mesToXMes[$msgId];
                    } else {
                        //insert message on xMessages
                        $xMessId = $xMessNextId;
                        $xMessNextId += 1;
                        $mesToXMes[$msgId] = $xMessId;

                        $msg = clone($messagesToTransfer[$msgId]);
                        $msg->Value = $xMessId;
                        $adventure->xmessages[] = $msg;

                        echo "Warning: MTX message $msgId will be replaced with xMessage $xMessId.\n";
                    }
                    //Convert MES into XMESS
                    $condact->Opcode = XMES_OPCODE;
                    $condact->Condact = 'XMES';
                    $condact->Param1 = $xMessId;

                }
                elseif (($condact->Opcode == MESSAGE_OPCODE) && ($condact->Indirection1 == 0) && 
                    array_key_exists($condact->Param1, $messagesToTransfer))
                {
                    $msgId = $condact->Param1;
                    if (array_key_exists($msgId, $messageToXMes))
                    {
                        //We already have this message transferred.
                        $xMessId = $messageToXMes[$msgId];
                    } else {
                        //insert message on xMessages
                        $xMessId = $xMessNextId;
                        $xMessNextId += 1;
                        $messageToXMes[$msgId] = $xMessId;

                        // Since MESSAGE prints a NewLine at the end, we add it now:
                        $msg = clone($messagesToTransfer[$msgId]);
                        $msg->Value = $xMessId;
                        $msg->Text = ($msg->Text).chr(13);
                        $msg->originalText = ($msg->originalText).chr(13);
                        $adventure->xmessages[] = $msg;

                        echo "Warning: MTX message $msgId will be replaced with xMessage $xMessId.\n";
                    }
                    //Convert MESSAGE into XMESS
                    $condact->Opcode = XMES_OPCODE;
                    $condact->Condact = 'XMES';
                    $condact->Param1 = $xMessId;
                }
            }
        }
    }
    return $adventure;
}

//********************************************** XPLAY *************************************************************** */

function mmlToBeep($note, &$values, $subtarget)
{
    
    $condact = NULL;
    $noteIdx = array('C'=>0, 'C#'=>1, 'D'=>2, 'D#'=>3, 'E'=>4,  'F'=>5, 'F#'=>6, 'G'=>7, 'G#'=>8, 'A'=>9, 'A#'=>10, 'B'=>11,
                     'C+'=>1,         'D+'=>3,         'E+'=>5, 'F+'=>6,         'G+'=>8,         'A+'=>10,         'B+'=>12,
                     'C-'=>-1,        'D-'=>1,         'E-'=>3, 'F-'=>4,         'G-'=>6,         'A-'=>8,          'B-'=>10);
    $baseLength = 195;

    $cmd = $note[0];
    // ############ Note: [A-G][#:halftone][num:length][.:period]
    if ($cmd>='A' && $cmd<='G') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1); 
        }
        $length = $values[XPLAY_LENGTH] / $period;
        
        $end = 1;                           //Note index
        if (@$note[1]=='#' || @$note[1]=='-' || @$note[1]=='+') $end++;
        $idx = $noteIdx[substr($note, 0, $end)];
        
        if ($end<strlen($note))             //Length
            $length = intval(substr($note, $end)) / $period;

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        if ($length==0) Error('Wrong length at note ' . $note);
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 24 + $values[XPLAY_OCTAVE]*24 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Note lenght [1-64] (1=full note, 2=half note, 3=third note, ..., default:4)
    if ($cmd=='L') {
        $values[XPLAY_LENGTH] = intval(substr($note, 1));
    } else
    // ############ Pause [1-64] (1=full pause, 2=half pause, 3=third pause, ...)
    if ($cmd=='R') {
        $period = 1;
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        if (strlen($note)>1)
            $length = intval(substr($note, 1)) / $period;

        $condact = new stdClass();
        $condact->Opcode = PAUSE_OPCODE;
        $condact->NumParams = 1;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Indirection1 = 0;
        $condact->Condact = 'PAUSE';
    } else
    // ############ Note Pitch [0-96]
    if ($cmd=='N') {
        $period = 1;                        //Period increase length
        while (substr($note, -1)=='.') {
            $period *= 1.5;
            $note = substr($note, 0, strlen($note)-1);
        }
        $length = $values[XPLAY_LENGTH] / $period;

        $idx = intval(@substr($note, 1));    //Note index

        $condact = new stdClass();
        $condact->Opcode = BEEP_OPCODE;
        $condact->NumParams = 2;
        $condact->Param1 = intval(round($baseLength * (120 / $values[XPLAY_TEMPO]) / $length));
        $condact->Param2 = 48 + $idx*2;
        $condact->Indirection1 = 0;
        $condact->Condact = 'BEEP';
    } else
    // ############ Octave [1-8] (default:4)
    if ($cmd=='O') {
        $values[XPLAY_OCTAVE] = intval(substr($note, 1));
    } else
    // ############ Tempo [32-255] (indicates the number of quarter notes per minute, default:120)
    if ($cmd=='T') {
        $values[XPLAY_TEMPO] = (intval(substr($note, 1)) & 255);
    } else
    // ############ Volume [0-15] (default:8)
    if ($cmd=='V') {
        $values[XPLAY_VOLUME] = intval(substr($note, 1)) & 15;  //Volume can be changed using SFX (direct access to PSG registers).
    } else
    // ############ Decreases one octave
    if ($cmd=='<') {
        if ($values[XPLAY_OCTAVE]>1) $values[XPLAY_OCTAVE]--;
    } else
    // ############ Increases one octave
    if ($cmd=='>') {
        if ($values[XPLAY_OCTAVE]<8) $values[XPLAY_OCTAVE]++;
    }
    return $condact;
}
//********************************************** Palette **************************************************************** */

$defaultPalette = array(0, 7, 2, 3, 4, 5, 6, 1, 16+0, 16+7, 16+2, 16+3, 16+4, 16+5, 16+6, 16+1);

function parsePaletteData($paletteData, &$palette)
{
    if (!array_key_exists("colors", $paletteData)) return false;
    if(sizeof($paletteData->colors)!=16) return false;
    for($i=0;$i<16;$i++)
    {
        if (!array_key_exists("color", $paletteData->colors[$i])) return false;
        $value = $paletteData->colors[$i]->color;
        if (!is_numeric($value)) return false;
        $value = intval($value);
        if($value < 0 || $value > 7) return false;
        if (array_key_exists("bright", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->bright)) return false;
            if($paletteData->colors[$i]->bright) $value+=8;
        }
        if (array_key_exists("flash", $paletteData->colors[$i]))
        {
            if(!is_bool($paletteData->colors[$i]->flash)) return false;
            if($paletteData->colors[$i]->flash) $value+=16;
        }
        $palette[$i] = $value;
    }
    return true;
}

//********************************************** MAIN **************************************************************** */
function Syntax()
{
    echo("SYNTAX: php drb128.php [options] <target> <language> <sublang> <chars> <inputfile> <charsetfile>\n\n");
    echo("+ [options]: one or more of the following:\n");
    echo ("              -v    : Verbose output\n");
    echo ("              -3    : Prepend +3 header to ADx files (3h stands for 'Three header')\n");
    echo ("              -d    : Forced debug mode\n");
    echo ("              -c    : Forced classic mode\n");
    echo ("              -b    : Use best fit algorithm when assigning the memory banks (first fit by default)\n");
    echo ("  -o [output file]  : (optional) path & file name of output files. If absent, same name of json file would be used.\n");
    echo ("  -i [image path]   : (optional) the path to search for images. Only for TAPE target.\n");
    echo ("  -p [palette file] : (optional) path & file name of palette definition JSON file.\n");
    echo ("  -t [token path]   : (optional) path & file name to token file for text compression.\n");
    echo ("  -k [char. id]     : (optional) character code for the cursor.\n");
    echo ("  -x [bank]         : (optional) number of the memory bank to exclude.\n");
    echo "\n";
    echo("+ <target>: The machine objetive. Valid values: TAPE and PLUS3.\n");
    echo("+ <language>: game language, should be 'EN', 'ES', 'DE', 'FR' or 'PT' (English, Spanish, German, French or Portuguese).\n");
    echo("+ <sublang>: interpreter language, should be 'EN' or 'ES' (English or Spanish).\n");
    echo("+ <chars>: Number of character per line. Valid values 42 and 32.\n");
    echo("+ <inputfile>: a json file generated by DRF.\n");
    echo("+ <charsetfile>: a file with the embedded charset. This file is a 2048 bytes file with the definition of a charset \n");
    echo("                 (o bytes per character, 256 characters)\n");
    echo "\n";
    echo "Examples:\n";
    echo "php drb128 tape es es 42 game.json charset.chr\n";
    echo "php drb128 -cd tape en en 42 game.json charset.chr\n";
    echo "php drb128 -bv -o mygame.ad0 plus3 en en 32 game.json charset.chr\n";
    echo "\n";
    echo "Text compression will use the built in tokens for each language unless an alternative token file is supplied.\n";
    echo "To know about the TOK file content format look for the default tokens array in DRB source code.\n";
    echo "\n";
    echo "The image files must be SCR compressed with the DCP compressor and with the name like 001.DCP.\n";
    echo "where this image will be the number of the location where it will show.\n";
    exit(1);
}

if (intval(date("Y"))>2018) $extra = '-'.date("Y"); else $extra = '';
echo "DAAD Reborn Compiler Backend for ZX Spectrum 128 ".VERSION_HI.".".VERSION_LO. " (C) Uto 2018$extra & Cronomantic\n";
if (!function_exists ('utf8_encode')) Error('This software requires php-xml package, please use yum or apt-get to install it.');

$rest_index = null;
$opts = getopt('3vcdbo:i:k:p:t:x:', [], $rest_index);
$posArgs = array_slice($argv, $rest_index);

if (sizeof($posArgs) < 6) Syntax();

$nextParam = 0;
$subtarget = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($subtarget!='TAPE') && ($subtarget!='PLUS3')) Error("Invalid subtarget '$subtarget'");

$language = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($language!='ES') && ($language!='EN') && ($language!='DE') && ($language!='PT') && ($language!='FR')) Error('Invalid target language');

$sublang = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($sublang!='ES') && ($sublang!='EN')) Error('Invalid interpreter language');

$numchars = strtoupper($posArgs[$nextParam]); $nextParam++;
if (($numchars!='42') && ($numchars!='32')) Error('Invalid number of characters per line');

$inputFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($inputFileName)) Error('File not found');
$json = file_get_contents($inputFileName);
$adventure = json_decode(utf8_encode($json));
if (!$adventure)
{
    $error = 'Invalid json file: ';
    switch (json_last_error())
    {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
    }
    Error($error);
}

// Get token filename
$tokensFilename = '';
if (array_key_exists('t', $opts))
{
    $tokensFileName = $opts['t'];
    if (!file_exists($tokensFilename)) Error('Tokens file not found');
}

// Charset file
$charsetFileName = $posArgs[$nextParam]; $nextParam++;
if (!file_exists($charsetFileName)) Error('Charset file not found');
if (filesize($charsetFileName) != 2048) Error('Charset file size invalid');

// Parse optional parameters
$adventure->prependPlus3Header = array_key_exists('3', $opts);
$adventure->verbose = array_key_exists('v', $opts);
$adventure->forcedClassicMode = array_key_exists('c', $opts);
$adventure->forcedDebugMode = array_key_exists('d', $opts);
$adventure->forcedPadding = false;
$adventure->useBestFit = array_key_exists('b', $opts);

$bankReserved=0;
if (array_key_exists('x', $opts))
{
    $bankReserved=$opts['x'];
    if(!is_numeric($bankReserved)) Error("Reserved bank is not a valid value");
    $bankReserved=intval($bankReserved);
    if ($bankReserved < 1 || $bankReserved > 7 ||
        $bankReserved == 2 || $bankReserved == 5) Error("Invalid bank to reserve");
    if ($subtarget == 'PLUS3' && $bankReserved >= 6) Error("Bank not available on +3");
}

$cursorCode = 0x5f;
if (array_key_exists('k', $opts))
{
    $cursorCode = $opts['k'];
    if(!is_numeric($cursorCode)) Error("Cursor code is not a number");
    $cursorCode = intval($cursorCode);
    if ($cursorCode < 0 || $cursorCode > 255) Error("Invalid cursor code value");
}

$outputFileName = '';
if (array_key_exists('o', $opts)) $outputFileName = $opts['o'];
if ($outputFileName == '') $outputFileName = $inputFileName;
$outputFileName = replace_extension($outputFileName, 'AD0');
if ($outputFileName == $inputFileName) Error('Input and output file name cannot be the same');

// Gets the screen files
$screenFileSizes = array();
$screenFileNames = array();
$screenFilesPath = '';
if (array_key_exists('i', $opts))
{
    if ($subtarget!='TAPE')
    {
        Error('Images on memory only available for TAPE subtarget');
    } else {
        $screenFilesPath = $opts['i'];
    }
}
if ($screenFilesPath != '')
{
    if (!is_dir($screenFilesPath)) Error("Invalid path for images.");
    $fileList = glob($screenFilesPath . '/[0-9][0-9][0-9].DCP');
    foreach($fileList as $screenFileName){
        if(is_file($screenFileName)){
            if ((filesize($screenFileName) > 6912)||(filesize($screenFileName)==0)) Error("File '$screenFileName' is surely not an image file.");
            $screenFileSizes[basename($screenFileName, '.DCP')] = filesize($screenFileName);
            $screenFileNames[basename($screenFileName, '.DCP')] = $screenFileName;
        }
    }
}
if (sizeof($screenFileNames) > 255) Error("Too many image files");

$palette = $defaultPalette;
if (array_key_exists('p', $opts))
{
    $paletteFileName = $opts['p'];
    if (!file_exists($paletteFileName)) Error('Palette file not found');
    $json = file_get_contents($paletteFileName);
    $paletteData = json_decode(utf8_encode($json));
    if (!$paletteData)
    {
        $error = 'Invalid palette json file: ';
        switch (json_last_error())
        {
        case JSON_ERROR_DEPTH: $error.= 'Maximum stack depth exceeded'; break;
        case JSON_ERROR_STATE_MISMATCH: $error.= 'Underflow or the modes mismatch'; break;
        case JSON_ERROR_CTRL_CHAR: $error.= ' - Unexpected control character found'; break;
        case JSON_ERROR_SYNTAX: $error.= ' - Syntax error, malformed JSON'; break;
        case JSON_ERROR_UTF8: $error.= ' - Malformed UTF-8 characters, possibly incorrectly encoded'; break;
        default: $error.= 'Unknown error';
        break;
        }
        Error($error);
    }
    if (!parsePaletteData($paletteData, $palette)) Error("Error in palette JSON");
}

//Interpreter selection
$interpreterFile = $interpreters[$subtarget][$sublang][$numchars];
$interpreterFile = base64_decode($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = gzuncompress($interpreterFile);
if (!$interpreterFile) Error("Interpreter not valid");
$interpreterFile = string2intArr($interpreterFile);
$interpreterSize = sizeof($interpreterFile);
if (( $interpreterSize == 0)||($interpreterSize > (0xC000 - 0x6000))) Error("Interpreter does not have a valid size.");

if ($adventure->verbose) echo ("Verbose mode on\n");

// Create the vectors for extens and USRPTR
$adventure->extvec = array();
for ($i=0;$i<13;$i++) $adventure->extvec[$i] = 0;

// Replace special characters over ASCII 127 and escape chars.
replaceEscapeChars($adventure);
checkStrings($adventure);

// Check settings in JSON
$adventure->classicMode = $adventure->settings[0]->classic_mode;
if ($adventure->forcedClassicMode) $adventure->classicMode = true;
$adventure->debugMode = $adventure->settings[0]->debug_mode;
if ($adventure->forcedDebugMode) $adventure->debugMode = true;

if ($adventure->verbose)
{
    if ($adventure->classicMode) echo "Classic mode ON, optimizations disabled.\n"; else echo "Classic mode OFF, optimizations enabled.\n";
    if ($adventure->debugMode) echo "Debug mode ON, generating DEBUG information for ZesarUX debugger.\n";
    if ($adventure->forcedPadding) echo "Padding has been forced.\n";
}

$baseAddress = 0x6000;
$baseAddressBanks = 0xC000;
$screenBufferSize = 0x1B06;
$diskBufferSize = 0x1000;

$bankCurrentAddress = array(
    0 => $baseAddress,
    1 => $baseAddressBanks,
    3 => $baseAddressBanks,
    4 => $baseAddressBanks,
    6 => $baseAddressBanks,
    7 => $baseAddressBanks
);

$bankSizeAvailable = array(
    0 => 0x10000 - $baseAddress,
    1 => 0x10000 - $baseAddressBanks,
    3 => 0x10000 - $baseAddressBanks,
    4 => 0x10000 - $baseAddressBanks,
    6 => 0x10000 - $baseAddressBanks,
    7 => 0x10000 - $baseAddressBanks
);

// Special case for plus3, the bank 7 is not available and needs some cache
if ($subtarget == 'PLUS3')
{
    $bankSizeAvailable[6] = $bankSizeAvailable[6] - $diskBufferSize - $screenBufferSize;
    $bankSizeAvailable[7] = 0;
}

//Reserving a bank
if ($bankReserved != 0)
{
    $bankSizeAvailable[$bankReserved] = 0;
    if ($adventure->verbose) echo "Bank $bankReserved reserved.\n";
}

$currBank = 0;
$currBuffer = $currBank;

// **************************************************
// 1 ************** WRITE INTERPRETER ***************
// **************************************************
//Write pointer to header
writeWord(($interpreterSize + $baseAddress + 2), $GLOBALS['isBigEndian']);

$interpreterSize = writeBytes($interpreterFile);
if (!$interpreterSize) Error('Can\'t copy interpreter');
if ($adventure->verbose) echo "Interpreter copied: $interpreterSize bytes";
$interpreterSize += 2;
//Updating current address
$bankCurrentAddress[$currBank] += $interpreterSize;

// *********************************************
// 1 ************** WRITE HEADER ***************
// *********************************************
// DAAD version
$b = 3;
writeByte($b);

// Machine and language
$b = 0x01;   // Spectrum
$b = $b << 4; // Move machine ID to high nibble
if (($language=='ES') || ($language=='PT')) $b = $b | 1; // Set spanish language  (DE and EN keep English)
writeByte($b);

// This byte stored the null character, usually underscore, as set in /CTL section. That's why all classic  DDBs have same value: 95. For new targets (MSX2) we use that byte for subtarget information.
$b = 95;
writeByte($b);

// Number of object descriptions
$numberOfObjects = sizeof($adventure->object_data);
writeByte($numberOfObjects);
// Number of location descriptions
$numberOfLocations = sizeof($adventure->locations);
writeByte($numberOfLocations);
// Number of user messages
$numberOfMessages = sizeof($adventure->messages);
writeByte($numberOfMessages);
// Number of system messages
$numberOfSysmess = sizeof($adventure->sysmess);
writeByte($numberOfSysmess);
// Number of processes
$numberOfProcesses = sizeof($adventure->processes);
writeByte($numberOfProcesses);

// Fill the rest of the header with zeros, as we don't know yet the offset values. Will comeupdate them later.
writeBlock((0x3A-0x08) + 16 + (2*13));
$bankCurrentAddress[$currBank]+= (0x3A + 16 + (2*13));

$compressedTextOffset = 0;
$processListOffset = 0;
$objectLookupOffset = 0;
$locationLookupOffset = 0;
$messageLookupOffset = 0;
$sysmessLookupOffset = 0;
$connectionsLookupOffset = 0;
$vocabularyOffset = 0;
$initiallyAtOffset = 0;
$objectNamesOffset = 0;
$objectWeightAndAttrOffset = 0;
$objectExtraAttrOffset = 0;
$charsetLookupOffset = 0;
$imageIdxLookupOffset = 0;
$objectBufferOffset = 0;
$objectLookupBank = 0;
$locationLookupBank = 0;
$messageLookupBank = 0;
$sysmessLookupBank = 0;
$charsetLookupBank = 0;
$imageIdxLookupBank = 0;
$xmess0LookupOffset = 0;
$xmess0LookupBank = 0;
$xmess1LookupOffset = 0;
$xmess1LookupBank = 0;
$xmess2LookupOffset = 0;
$xmess2LookupBank = 0;
$xmess3LookupOffset = 0;
$xmess3LookupBank = 0;

// *********************************************
// 2 *************** DUMP DATA *****************
// *********************************************

// Replace all escape and spanish chars in the input strings with the ASCII codes used by DAAD interpreters
$compressionData = null;
$bestTokensDetails = null;

if (file_exists($tokensFilename))
{
    if ($adventure->verbose) echo "Loading tokens from $tokensFilename.\n";
    $compressionJSON = file_get_contents($tokensFilename);
}
else
{
    if ($adventure->verbose) echo "Loading default compression tokens for '$language'.\n";
    switch ($language)
    {
        case 'EN': $compressionJSON = $compressionJSON_EN; break;
        case 'PT': $compressionJSON = $compressionJSON_PT; break;
        case 'DE': $compressionJSON = $compressionJSON_DE; break;
        case 'FR': $compressionJSON = $compressionJSON_FR; break;
        default : $compressionJSON = $compressionJSON_ES; break;
    }
}

$compressionData = json_decode($compressionJSON);


if (!$compressionData) Error('Invalid tokens file');
$hasTokens = ($compressionData->compression!='none');

for ($j=0;$j<sizeof($compressionData->tokens);$j++)
{
    $token = $compressionData->tokens[$j];
    $token = hex2str($token);
    $compressionData->tokens[$j] = $token;
}

// *********************************************
// 3 *************** DUMP DATA *****************
// *********************************************
// DumpExterns
generateExterns($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump Vocabulary
$vocabularyOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Vocabulary        [" . prettyFormat($vocabularyOffset) . "][$currBank]\n";
generateVocabulary($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Dump tokens for compression and compress text sections (if possible)
if ($hasTokens) $compressedTextOffset = $bankCurrentAddress[$currBank]; else $compressedTextOffset = 0; // If no compression, the header should have 0x0000 in the compression pointer
if ($adventure->verbose) echo "Tokens            [" . prettyFormat($compressedTextOffset) . "][$currBank]\n";
generateTokens($adventure , $bankCurrentAddress[$currBank], $hasTokens, $compressionData, $textSavings);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Connections
generateConnections($adventure, $bankCurrentAddress[$currBank]);
$connectionsLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations) ;
if ($adventure->verbose) echo "Connections       [" . prettyFormat($connectionsLookupOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Object names
$objectNamesOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Object words      [" . prettyFormat($objectNamesOffset) . "][$currBank]\n";
generateObjectNames($adventure, $bankCurrentAddress[$currBank]);
// Weight & standard Attr
$objectWeightAndAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Weight & std attr [" . prettyFormat($objectWeightAndAttrOffset) . "][$currBank]\n";
generateObjectWeightAndAttr($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
// Extra Attr
$objectExtraAttrOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Extra attr        [" . prettyFormat($objectExtraAttrOffset) . "][$currBank]\n";
generateObjectExtraAttr($adventure, $bankCurrentAddress[$currBank]);
// InitiallyAt
$initiallyAtOffset = $bankCurrentAddress[$currBank];
if ($adventure->verbose) echo "Initially at      [" . prettyFormat($initiallyAtOffset) . "][$currBank]\n";
generateObjectInitially($adventure, $bankCurrentAddress[$currBank]);
addPaddingIfRequired($bankCurrentAddress[$currBank]);
//Object buffer
$objectBufferOffset = $bankCurrentAddress[$currBank];
writeBlock($numberOfObjects * 5);
$bankCurrentAddress[$currBank]+= ($numberOfObjects * 5);
if ($adventure->verbose) echo "Object buffer      [" . prettyFormat($objectBufferOffset) . "][$currBank]\n";
addPaddingIfRequired($bankCurrentAddress[$currBank]);

// Move messages to xMessages if MTX is too big
$adventure = moveMessagesToXmessages($adventure);

// Generate XMessagess if avaliable
$xMessages = generateXMessages($adventure);


// Dump Processes
generateProcesses($adventure, $bankCurrentAddress[$currBank], $subtarget);
$processListOffset = $bankCurrentAddress[$currBank] - sizeof($adventure->processes) * 2;
if ($adventure->verbose) echo "Processes         [" . prettyFormat($processListOffset) . "][$currBank]\n";

//Updating size available
$bankSizeAvailable[$currBank] -= ($bankCurrentAddress[$currBank] - $baseAddress);


// ***********************************************
// 4 ********* Reorganize blocks *****************
// ***********************************************

$blockSize = array(
    'CHR' => filesize($charsetFileName),
    'STX' => getSizeSTX($adventure),
    'MTX' => getSizeMTX($adventure),
    'OTX' => getSizeOTX($adventure),
    'LTX' => getSizeLTX($adventure),
    'XMES0' => sizeof($xMessages[0]),
    'XMES1' => sizeof($xMessages[1]),
    'XMES2' => sizeof($xMessages[2]),
    'XMES3' => sizeof($xMessages[3]),
);

if (sizeof($screenFileSizes) > 0)
{
    $blockSize['PICIDX'] = 4 * sizeof($screenFileSizes);
    foreach ($screenFileSizes as $scrKey => $scrSize) $blockSize[$scrKey] = $scrSize;
}

if ($adventure->verbose) echo "Blocks to assign:\n";
foreach($blockSize as $currBlock => $bSize)
{
    if ($adventure->verbose) echo "Block $currBlock: $bSize bytes.\n";
    if ($bSize > 16*1024)
    {
        Error("Block " . $currBlock . " has more of 16kb, can not be allocated!\n");
    }
}

// Stores bank id of the block allocated to a block
// Initially no bank is assigned to any block
$blockBank = array_fill_keys(array_keys($blockSize), -1);

// pick each block and find suitable bank
// according to its size and assign to it
foreach(array_keys($blockSize) as $currBlock)
{
    $bestIdx = -1;
    foreach(array_keys($bankCurrentAddress) as $currBank)
    {
        // Find the best fit bank for current block
        if($bankSizeAvailable[$currBank] >= $blockSize[$currBlock])
        {
            if ($bestIdx == -1)
                $bestIdx = $currBank;
            elseif ($adventure->useBestFit && ($bankSizeAvailable[$bestIdx] > $bankSizeAvailable[$currBank]))
                $bestIdx = $currBank;
        }
    }
    // If we could find a block for current block
    if ($bestIdx != -1)
    {
        // allocate bank j to p[i] block
        $blockBank[$currBlock] = $bestIdx;
        // Reduce available memory in this bank
        $bankSizeAvailable[$bestIdx] -= $blockSize[$currBlock];
    }
}

//Checking if all blocks have been assigned
if (in_array(-1, $blockBank)) {
    echo "Unassigned blocks:\n";
    foreach($blockBank as $currBlock => $bIndex)
    {
        if ($bIndex == -1)
        {
            $bSize = $blockSize[$currBlock];
            echo "Block $currBlock: $bSize bytes not assigned!\n";
        }
    }
    Error("Can not allocate the data on RAM");
}

// *********************************************
// 5 ********* DUMP OTHER DATA *****************
// *********************************************

$imageLookupOffset = array();
$imageLookupBank = array();
foreach($blockBank as $currBlock => $currBank)
{
    $currBuffer = $currBank;
    switch($currBlock)
    {
        case 'CHR':
            //Character Set
            $size = writeFile($charsetFileName);
            if (!$size) Error('Can\'t copy set file');
            $charsetLookupOffset = $bankCurrentAddress[$currBank];
            $charsetLookupBank = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Character Set     [" . prettyFormat($charsetLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'STX':
            // Sysmess
            generateSTX($adventure, $bankCurrentAddress[$currBank]);
            $sysmessLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->sysmess);
            $sysmessLookupBank = $currBank;
            if ($adventure->verbose) echo "Sysmess           [" . prettyFormat($sysmessLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'MTX':
            generateMTX($adventure, $bankCurrentAddress[$currBank]);
            $messageLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->messages);
            $messageLookupBank = $currBank;
            if ($adventure->verbose) echo "Messages          [" . prettyFormat($messageLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'OTX':
            generateOTX($adventure, $bankCurrentAddress[$currBank]);
            $objectLookupOffset = $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->object_data);
            $objectLookupBank = $currBank;
            if ($adventure->verbose) echo "Object texts      [" . prettyFormat($objectLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'LTX':
            generateLTX($adventure, $bankCurrentAddress[$currBank]);
            $locationLookupOffset =  $bankCurrentAddress[$currBank] - 2 * sizeof($adventure->locations);
            $locationLookupBank = $currBank;
            if ($adventure->verbose) echo "Locations         [" . prettyFormat($locationLookupOffset) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
            break;
        case 'XMES0':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[0]);
            if ($size > 0) {
                $xmess0LookupOffset = $bankCurrentAddress[$currBank];
                $xmess0LookupBank = $currBank;
                appendBuffer($xMessages[0]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 0  [" . prettyFormat($xmess0LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES1':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[1]);
            if ($size > 0) {
                $xmess1LookupOffset = $bankCurrentAddress[$currBank];
                $xmess1LookupBank = $currBank;
                appendBuffer($xMessages[1]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 1  [" . prettyFormat($xmess1LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES2':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[2]);
            if ($size > 0) {
                $xmess2LookupOffset = $bankCurrentAddress[$currBank];
                $xmess2LookupBank = $currBank;
                appendBuffer($xMessages[2]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 2  [" . prettyFormat($xmess2LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'XMES3':
            // Dump XMessagess if avaliable
            $size = sizeof($xMessages[3]);
            if ($size > 0) {
                $xmess3LookupOffset = $bankCurrentAddress[$currBank];
                $xmess3LookupBank = $currBank;
                appendBuffer($xMessages[3]);
                $bankCurrentAddress[$currBank] += $size;
                if ($adventure->verbose) echo "Extra Messages 3  [" . prettyFormat($xmess3LookupOffset) . "][$currBank]\n";
                addPaddingIfRequired($bankCurrentAddress[$currBank]);
            }
            break;
        case 'PICIDX': //Do nothing for now
            break;
        default: //Image File
            $size = writeFile($screenFileNames[$currBlock]);
            if (!$size) Error('Can\'t copy image file');
            $imageLookupOffset[$currBlock] = $bankCurrentAddress[$currBank];
            $imageLookupBank[$currBlock] = $currBank;
            $bankCurrentAddress[$currBank] += $size;
            if ($adventure->verbose) echo "Picture $currBlock       [" . prettyFormat($imageLookupOffset[$currBlock]) . "][$currBank]\n";
            addPaddingIfRequired($bankCurrentAddress[$currBank]);
    }
}

if (sizeof($imageLookupOffset) > 0)
{
    $currBank = $blockBank['PICIDX'];
    $currBuffer = $currBank;
    $imageIdxLookupOffset = $bankCurrentAddress[$currBank];
    $imageIdxLookupBank = $currBank;
    foreach($imageLookupOffset as $currBlock => $currAddr)
    {
        writeByte(intval($currBlock));
        writeByte($imageLookupBank[$currBlock]);
        writeWord($currAddr, $GLOBALS['isBigEndian']);
        $bankCurrentAddress[$currBank] += 4;
    }
    if ($adventure->verbose) echo "Picture Idx       [" . prettyFormat($imageIdxLookupOffset) . "][$currBank]\n";
    addPaddingIfRequired($bankCurrentAddress[$currBank]);
} else {
    $imageIdxLookupOffset = 0;
    $imageIdxLookupBank = 0;
}

// *********************************************
// 6 **** PATCH HEADER WITH OFFSET VALUES ******
// *********************************************
$currBuffer = 0;
seek(8 + $interpreterSize);
// Compressed text position
writeWord($compressedTextOffset, $GLOBALS['isBigEndian']);
// Process list position
writeWord($processListOffset, $GLOBALS['isBigEndian']);
// Objects lookup list position
writeWord($objectLookupOffset, $GLOBALS['isBigEndian']);
// Locations lookup list position
writeWord($locationLookupOffset, $GLOBALS['isBigEndian']);
// User messages lookup list position
writeWord($messageLookupOffset, $GLOBALS['isBigEndian']);
// System messages lookup list position
writeWord($sysmessLookupOffset, $GLOBALS['isBigEndian']);
// Connections lookup list position
writeWord($connectionsLookupOffset, $GLOBALS['isBigEndian']);
// Vocabulary
writeWord($vocabularyOffset, $GLOBALS['isBigEndian']);
// Objects "initialy at" list position
writeWord($initiallyAtOffset, $GLOBALS['isBigEndian']);
// Object names positions
writeWord($objectNamesOffset, $GLOBALS['isBigEndian']);
// Object weight and container/wearable attributes
writeWord($objectWeightAndAttrOffset, $GLOBALS['isBigEndian']);
// Extra object attributes
writeWord($objectExtraAttrOffset, $GLOBALS['isBigEndian']);

//Beginning the new header fields here...
// Xtra messages 0
writeWord($xmess0LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 1
writeWord($xmess1LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 2
writeWord($xmess2LookupOffset, $GLOBALS['isBigEndian']);
// Xtra messages 3
writeWord($xmess3LookupOffset, $GLOBALS['isBigEndian']);
//Number of bank of the image index 0
writeByte($xmess0LookupBank);
//Number of bank of the image index 1
writeByte($xmess1LookupBank);
//Number of bank of the image index 2
writeByte($xmess2LookupBank);
//Number of bank of the image index 3
writeByte($xmess3LookupBank);

//Position of the font
writeWord($charsetLookupOffset, $GLOBALS['isBigEndian']);
//Position of the image index
writeWord($imageIdxLookupOffset, $GLOBALS['isBigEndian']);
//Object Buffer
writeWord($objectBufferOffset, $GLOBALS['isBigEndian']);
//Number of images
writeByte(sizeof($imageLookupOffset));
//Number of bank of object descriptions
writeByte($objectLookupBank);
//Number of bank of location descriptions
writeByte($locationLookupBank);
//Number of bank of user messages
writeByte($messageLookupBank);
//Number of bank of system messages
writeByte($sysmessLookupBank);
//Number of bank of character ser
writeByte($charsetLookupBank);
//Number of bank of the image index
writeByte($imageIdxLookupBank);
//Code of the character used as a cursor.
writeByte($cursorCode);

for($i=0;$i<16;$i++)
    writeByte($palette[$i]);

for($i=0;$i<13;$i++)
    writeWord($adventure->extvec[$i],$GLOBALS['isBigEndian']);

//Flush all buffers
if ($adventure->verbose) summary($adventure);
if ($textSavings>0) echo "Text compression saving: $textSavings bytes.\n";

foreach($bankSizeAvailable as $currBank => $bankSize)
{
    echo "Bank $currBank: $bankSize bytes available.\n";
}

foreach (array_keys($buffer) as $currBank)
{
    $currBuffer = $currBank;
    if (sizeBuffer() > 0)
    {
        $outputFileName = replace_extension($outputFileName, 'AD'.$currBank);
        $outputFileHandler = fopen($outputFileName, "wb");
        if (!$outputFileHandler) Error("Couldn't create file '$outputFileName'.\n");
        flushBuffer($outputFileHandler);
        fclose($outputFileHandler);
        if ($currBank == 0) $address = $baseAddress; else $address = $baseAddressBanks;
        if ($adventure->verbose)
            echo "File $outputFileName for ZXB-DAAD created. Loads at ".prettyFormat($address)." on bank $currBank.";

        if ($adventure->prependPlus3Header)
        {
            prependPlus3HeaderToDDB($outputFileName, $address);
            if ($adventure->verbose) echo (" +3DOS header added\n");
        }
        else if ($adventure->verbose) echo "\n";
    }
}

exit(0);
